// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package arbitrum_vrf_beacon

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type ECCArithmeticG1Point struct {
	P [2]*big.Int
}

type KeyDataStructKeyData struct {
	PublicKey []byte
	Hashes    [][32]byte
}

type VRFBeaconReportReport struct {
	Outputs           []VRFBeaconTypesVRFOutput
	JuelsPerFeeCoin   *big.Int
	RecentBlockHeight uint64
	RecentBlockHash   [32]byte
}

type VRFBeaconTypesCallback struct {
	RequestID    *big.Int
	NumWords     uint16
	Requester    common.Address
	Arguments    []byte
	SubID        uint64
	GasAllowance *big.Int
}

type VRFBeaconTypesCostedCallback struct {
	Callback VRFBeaconTypesCallback
	Price    *big.Int
}

type VRFBeaconTypesOutputServed struct {
	Height            uint64
	ConfirmationDelay *big.Int
}

type VRFBeaconTypesVRFOutput struct {
	BlockHeight       uint64
	ConfirmationDelay *big.Int
	VrfOutput         ECCArithmeticG1Point
	Callbacks         []VRFBeaconTypesCostedCallback
}

var ArbitrumVRFBeaconMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractLinkTokenInterface\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"contractIVRFCoordinatorProducerAPI\",\"name\":\"coordinator\",\"type\":\"address\"},{\"internalType\":\"contractDKG\",\"name\":\"keyProvider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providedHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"}],\"name\":\"HistoryDomainSeparatorWrong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keyProvider\",\"type\":\"address\"}],\"name\":\"KeyInfoMustComeFromProvider\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expectedLength\",\"type\":\"uint256\"}],\"name\":\"OffchainConfigHasWrongLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"occVersion\",\"type\":\"uint64\"}],\"name\":\"UnknownConfigVersion\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractAccessControllerInterface\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractAccessControllerInterface\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"BillingAccessControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maximumGasPriceGwei\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"reasonableGasPriceGwei\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"observationPaymentGjuels\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"transmissionPaymentGjuels\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"accountingGas\",\"type\":\"uint24\"}],\"name\":\"BillingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"aggregatorRoundId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"epochAndRound\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"juelsPerFeeCoin\",\"type\":\"uint192\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"height\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelay\",\"type\":\"uint24\"}],\"indexed\":false,\"internalType\":\"structVRFBeaconTypes.OutputServed[]\",\"name\":\"outputsServed\",\"type\":\"tuple[]\"}],\"name\":\"NewTransmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contractLinkTokenInterface\",\"name\":\"linkToken\",\"type\":\"address\"}],\"name\":\"OraclePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"PayeeshipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"PayeeshipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COORDINATOR\",\"outputs\":[{\"internalType\":\"contractIVRFCoordinatorProducerAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK\",\"outputs\":[{\"internalType\":\"contractLinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_CONF_DELAYS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"}],\"name\":\"acceptPayeeship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelay\",\"type\":\"uint24\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"p\",\"type\":\"uint256[2]\"}],\"internalType\":\"structECCArithmetic.G1Point\",\"name\":\"vrfOutput\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"gasAllowance\",\"type\":\"uint96\"}],\"internalType\":\"structVRFBeaconTypes.Callback\",\"name\":\"callback\",\"type\":\"tuple\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"}],\"internalType\":\"structVRFBeaconTypes.CostedCallback[]\",\"name\":\"callbacks\",\"type\":\"tuple[]\"}],\"internalType\":\"structVRFBeaconTypes.VRFOutput[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint192\",\"name\":\"juelsPerFeeCoin\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"recentBlockHeight\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"recentBlockHash\",\"type\":\"bytes32\"}],\"internalType\":\"structVRFBeaconReport.Report\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"exposeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBilling\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"maximumGasPriceGwei\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reasonableGasPriceGwei\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"observationPaymentGjuels\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"transmissionPaymentGjuels\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"accountingGas\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBillingAccessController\",\"outputs\":[{\"internalType\":\"contractAccessControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"hashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"structKeyDataStruct.KeyData\",\"name\":\"kd\",\"type\":\"tuple\"}],\"name\":\"keyGenerated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkAvailableForPayment\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newKeyRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitterAddress\",\"type\":\"address\"}],\"name\":\"oracleObservationCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitterAddress\",\"type\":\"address\"}],\"name\":\"owedPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_keyID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_provingKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"maximumGasPriceGwei\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reasonableGasPriceGwei\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"observationPaymentGjuels\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"transmissionPaymentGjuels\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"accountingGas\",\"type\":\"uint24\"}],\"name\":\"setBilling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractAccessControllerInterface\",\"name\":\"_billingAccessController\",\"type\":\"address\"}],\"name\":\"setBillingAccessController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"setPayees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"transferPayeeship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"}],\"name\":\"withdrawPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b50604051620046eb380380620046eb8339810160408190526200003491620001d5565b8181858581813380600081620000915760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000c457620000c48162000111565b5050506001600160a01b03918216608052811660a052600380546001600160a01b0319908116606417909155601380549690921695169490941790935550601455506200022f9350505050565b336001600160a01b038216036200016b5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000088565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6001600160a01b0381168114620001d257600080fd5b50565b60008060008060808587031215620001ec57600080fd5b8451620001f981620001bc565b60208601519094506200020c81620001bc565b60408601519093506200021f81620001bc565b6060959095015193969295505050565b60805160a0516144576200029460003960008181610312015281816112730152818161134f0152818161140a015281816122f4015281816124ab015281816128cc0152612fc201526000818161023301528181611ed4015261252a01526144576000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063b121e147116100f9578063d09dc33911610097578063e4902f8211610071578063e4902f8214610481578063eb5dcd6c146104a9578063f2fde38b146104bc578063fbffd2c1146104cf57600080fd5b8063d09dc3391461045d578063d57fc45a14610465578063e3d0e7121461046e57600080fd5b8063c1075329116100d3578063c10753291461041f578063c278e5b714610432578063c4c92b3714610443578063cc31f7dd1461045457600080fd5b8063b121e147146103e6578063b1dc65a4146103f9578063bf2732c71461040c57600080fd5b8063643dc105116101665780638ac28d5a116101405780638ac28d5a146103855780638da5cb5b146103985780639c849b30146103a9578063afcb95d7146103bc57600080fd5b8063643dc1051461033e57806379ba50971461035157806381ff70481461035957600080fd5b806329937268116101a2578063299372681461026d5780632f7527cc146102f35780633b2bcbf11461030d57806355e487491461033457600080fd5b80630eafb25b146101c9578063181f5a77146101ef5780631b6b6d231461022e575b600080fd5b6101dc6101d7366004613137565b6104e2565b6040519081526020015b60405180910390f35b604080518082018252601581527f565246426561636f6e20312e302e302d616c7068610000000000000000000000602082015290516101e691906131ac565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101e6565b6102b76002546a0100000000000000000000810463ffffffff90811692600160701b8304821692600160901b8104831692600160b01b82041691600160d01b90910462ffffff1690565b6040805163ffffffff9687168152948616602086015292851692840192909252909216606082015262ffffff909116608082015260a0016101e6565b6102fb600881565b60405160ff90911681526020016101e6565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b61033c6105ea565b005b61033c61034c3660046131e9565b610634565b61033c610892565b6003546005546040805160008152600160c01b90930463ffffffff1660208401528201526060016101e6565b61033c610393366004613137565b610943565b6000546001600160a01b0316610255565b61033c6103b736600461329e565b6109b5565b6005546007546040805160008152602081019390935263ffffffff909116908201526060016101e6565b61033c6103f4366004613137565b610b93565b61033c61040736600461334c565b610c6f565b61033c61041a366004613593565b61111f565b61033c61042d366004613660565b61118d565b61033c61044036600461368c565b50565b6012546001600160a01b0316610255565b6101dc60145481565b6101dc611405565b6101dc60155481565b61033c61047c3660046136f9565b6114a9565b61049461048f366004613137565b611cae565b60405163ffffffff90911681526020016101e6565b61033c6104b73660046137e7565b611d67565b61033c6104ca366004613137565b611ea0565b61033c6104dd366004613137565b611eb1565b6001600160a01b03811660009081526008602090815260408083208151606081018352905460ff80821615158084526101008304909116948301949094526201000090046001600160601b031691810191909152906105445750600092915050565b6002546020820151600091600160901b900463ffffffff1690600c9060ff16601f811061057357610573613820565b6008810491909101546002546105a9926007166004026101000a90910463ffffffff90811691660100000000000090041661384c565b63ffffffff166105b99190613871565b6105c790633b9aca00613871565b905081604001516001600160601b0316816105e29190613890565b949350505050565b6013546001600160a01b031633811461062c5760405163292f4fb560e01b81523360048201526001600160a01b03821660248201526044015b60405180910390fd5b506000601555565b6012546001600160a01b03166106526000546001600160a01b031690565b6001600160a01b0316336001600160a01b031614806106de5750604051630d629b5f60e31b81526001600160a01b03821690636b14daf89061069d90339060009036906004016138d1565b602060405180830381865afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de91906138f4565b61072a5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79206f776e65722662696c6c696e6741646d696e2063616e2063616c6c6044820152606401610623565b610732611ec2565b600280547fffffffffffffffffffffffffffff0000000000000000ffffffffffffffffffff166a010000000000000000000063ffffffff8981169182027fffffffffffffffffffffffffffff00000000ffffffffffffffffffffffffffff1692909217600160701b898416908102919091177fffffffffffff0000000000000000ffffffffffffffffffffffffffffffffffff16600160901b8985169081027fffffffffffff00000000ffffffffffffffffffffffffffffffffffffffffffff1691909117600160b01b948916948502177fffffff000000ffffffffffffffffffffffffffffffffffffffffffffffffffff16600160d01b62ffffff89169081029190911790955560408051938452602084019290925290820152606081019190915260808101919091527f0bf184bf1bba9699114bdceddaf338a1b364252c5e497cc01918dde92031713f9060a00160405180910390a1505050505050565b6001546001600160a01b031633146108ec5760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152606401610623565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6001600160a01b038181166000908152601060205260409020541633146109ac5760405162461bcd60e51b815260206004820152601760248201527f4f6e6c792070617965652063616e2077697468647261770000000000000000006044820152606401610623565b61044081612367565b6109bd6125a5565b828114610a0c5760405162461bcd60e51b815260206004820181905260248201527f7472616e736d6974746572732e73697a6520213d207061796565732e73697a656044820152606401610623565b60005b83811015610b8c576000858583818110610a2b57610a2b613820565b9050602002016020810190610a409190613137565b90506000848484818110610a5657610a56613820565b9050602002016020810190610a6b9190613137565b6001600160a01b038084166000908152601060205260409020549192501680158080610aa85750826001600160a01b0316826001600160a01b0316145b610af45760405162461bcd60e51b815260206004820152601160248201527f706179656520616c7265616479207365740000000000000000000000000000006044820152606401610623565b6001600160a01b03848116600090815260106020526040902080546001600160a01b03191685831690811790915590831614610b7557826001600160a01b0316826001600160a01b0316856001600160a01b03167f78af32efdcad432315431e9b03d27e6cd98fb79c405fdc5af7c1714d9c0f75b360405160405180910390a45b505050508080610b8490613916565b915050610a0f565b5050505050565b6001600160a01b03818116600090815260116020526040902054163314610bfc5760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792070726f706f736564207061796565732063616e20616363657074006044820152606401610623565b6001600160a01b0381811660008181526010602090815260408083208054336001600160a01b031980831682179093556011909452828520805490921690915590519416939092849290917f78af32efdcad432315431e9b03d27e6cd98fb79c405fdc5af7c1714d9c0f75b39190a45050565b60005a60408051610100808201835260025460ff808216845291810464ffffffffff166020808501919091526601000000000000820463ffffffff908116858701526a0100000000000000000000830481166060860152600160701b830481166080860152600160901b8304811660a0860152600160b01b83041660c0850152600160d01b90910462ffffff1660e08401523360009081526008825293909320549394509092918c01359116610d675760405162461bcd60e51b815260206004820152601860248201527f756e617574686f72697a6564207472616e736d697474657200000000000000006044820152606401610623565b6005548b3514610db95760405162461bcd60e51b815260206004820152601560248201527f636f6e666967446967657374206d69736d6174636800000000000000000000006044820152606401610623565b610dc78a8a8a8a8a8a612601565b8151610dd490600161392f565b60ff168714610e255760405162461bcd60e51b815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e6174757265730000000000006044820152606401610623565b868514610e745760405162461bcd60e51b815260206004820152601e60248201527f7369676e617475726573206f7574206f6620726567697374726174696f6e00006044820152606401610623565b60008a8a604051610e86929190613954565b604051908190038120610e9d918e90602001613964565b60408051601f19818403018152828252805160209182012083830190925260008084529083018190529092509060005b8a8110156110435760006001858a8460208110610eec57610eec613820565b610ef991901a601b61392f565b8f8f86818110610f0b57610f0b613820565b905060200201358e8e87818110610f2457610f24613820565b9050602002013560405160008152602001604052604051610f61949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610f83573d6000803e3d6000fd5b505060408051601f198101516001600160a01b03811660009081526009602090815290849020838501909452925460ff808216151580855261010090920416938301939093529095509250905061101c5760405162461bcd60e51b815260206004820152600f60248201527f7369676e6174757265206572726f7200000000000000000000000000000000006044820152606401610623565b826020015160080260ff166001901b8401935050808061103b90613916565b915050610ecd565b5081827e0101010101010101010101010101010101010101010101010101010101010116146110b45760405162461bcd60e51b815260206004820152601060248201527f6475706c6963617465207369676e6572000000000000000000000000000000006044820152606401610623565b50600091506111039050838d836020020135848e8e8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061269592505050565b9050611111838286336129b0565b505050505050505050505050565b6013546001600160a01b031633811461115c5760405163292f4fb560e01b81523360048201526001600160a01b0382166024820152604401610623565b815160405161116e9190602001613980565b60408051601f1981840301815291905280516020909101206015555050565b6000546001600160a01b03163314806112175750601254604051630d629b5f60e31b81526001600160a01b0390911690636b14daf8906111d690339060009036906004016138d1565b602060405180830381865afa1580156111f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121791906138f4565b6112635760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79206f776e65722662696c6c696e6741646d696e2063616e2063616c6c6044820152606401610623565b600061126d612ac5565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166345ccbb8b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f3919061399c565b9050818110156113455760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e63650000000000000000000000006044820152606401610623565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f99b1d688561138861138286866139b5565b87612c92565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044015b600060405180830381600087803b1580156113e757600080fd5b505af11580156113fb573d6000803e3d6000fd5b5050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166345ccbb8b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148a919061399c565b90506000611496612ac5565b90506114a281836139cc565b9250505090565b6114b16125a5565b601f8911156115025760405162461bcd60e51b815260206004820152601060248201527f746f6f206d616e79206f7261636c6573000000000000000000000000000000006044820152606401610623565b8887146115515760405162461bcd60e51b815260206004820152601660248201527f6f7261636c65206c656e677468206d69736d61746368000000000000000000006044820152606401610623565b8861155d876003613a40565b60ff16106115ad5760405162461bcd60e51b815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f206869676800000000000000006044820152606401610623565b6115b98660ff16612cac565b6040805160e060208c02808301820190935260c082018c815260009383928f918f918291908601908490808284376000920191909152505050908252506040805160208c810282810182019093528c82529283019290918d918d91829185019084908082843760009201919091525050509082525060ff891660208083019190915260408051601f8a01839004830281018301825289815292019190899089908190840183828082843760009201919091525050509082525067ffffffffffffffff861660208083019190915260408051601f8701839004830281018301825286815292019190869086908190840183828082843760009201919091525050509152506002805465ffffffffff001916905590506116d5611ec2565b600a5460005b81811015611786576000600a82815481106116f8576116f8613820565b6000918252602082200154600b80546001600160a01b039092169350908490811061172557611725613820565b60009182526020808320909101546001600160a01b039485168352600982526040808420805461ffff1916905594168252600890529190912080546dffffffffffffffffffffffffffff19169055508061177e81613916565b9150506116db565b50611793600a6000612ff7565b61179f600b6000612ff7565b60005b825151811015611a1d5760096000846000015183815181106117c6576117c6613820565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff161561183a5760405162461bcd60e51b815260206004820152601760248201527f7265706561746564207369676e657220616464726573730000000000000000006044820152606401610623565b604080518082019091526001815260ff82166020820152835180516009916000918590811061186b5761186b613820565b6020908102919091018101516001600160a01b03168252818101929092526040016000908120835181549484015161ffff1990951690151561ff0019161761010060ff909516949094029390931790925584015180516008929190849081106118d6576118d6613820565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff161561194a5760405162461bcd60e51b815260206004820152601c60248201527f7265706561746564207472616e736d69747465722061646472657373000000006044820152606401610623565b60405180606001604052806001151581526020018260ff16815260200160006001600160601b0316815250600860008560200151848151811061198f5761198f613820565b6020908102919091018101516001600160a01b03168252818101929092526040908101600020835181549385015194909201516001600160601b031662010000026dffffffffffffffffffffffff00001960ff959095166101000261ff00199315159390931661ffff1990941693909317919091179290921617905580611a1581613916565b9150506117a2565b5081518051611a3491600a91602090910190613015565b506020808301518051611a4b92600b920190613015565b506040828101516002805460ff191660ff90921691909117905560035481517fa3b1b31d0000000000000000000000000000000000000000000000000000000081529151600160c01b820463ffffffff16926000926001600160a01b03169163a3b1b31d916004808201926020929091908290030181865afa158015611ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af9919061399c565b6003805463ffffffff808416600160c01b027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff9092169190911791829055919250600091611b6191740100000000000000000000000000000000000000009004166001613a69565b905080600360146101000a81548163ffffffff021916908363ffffffff1602179055506000611bb546308463ffffffff1689600001518a602001518b604001518c606001518d608001518e60a00151612cfc565b9050806005600001819055507f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e0584828489600001518a602001518b604001518c606001518d608001518e60a00151604051611c1899989796959493929190613ad5565b60405180910390a16002546601000000000000900463ffffffff1660005b875151811015611c905781600c82601f8110611c5457611c54613820565b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055508080611c8890613916565b915050611c36565b50611c9b8c8c612d89565b5050505050505050505050505050505050565b6001600160a01b03811660009081526008602090815260408083208151606081018352905460ff80821615158084526101008304909116948301949094526201000090046001600160601b03169181019190915290611d105750600092915050565b600c816020015160ff16601f8110611d2a57611d2a613820565b600881049190910154600254611d60926007166004026101000a90910463ffffffff90811691660100000000000090041661384c565b9392505050565b6001600160a01b03828116600090815260106020526040902054163314611dd05760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792063757272656e742070617965652063616e207570646174650000006044820152606401610623565b6001600160a01b0381163303611e285760405162461bcd60e51b815260206004820152601760248201527f63616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610623565b6001600160a01b03808316600090815260116020526040902080548383166001600160a01b031982168117909255909116908114611e9b576040516001600160a01b038084169133918616907f84f7c7c80bb8ed2279b4aab5f61cd05e6374073d38f46d7f32de8c30e9e3836790600090a45b505050565b611ea86125a5565b61044081612d97565b611eb96125a5565b61044081612e40565b600254604080516103e08101918290527f0000000000000000000000000000000000000000000000000000000000000000926601000000000000900463ffffffff169160009190600c90601f908285855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411611f13579050505050505090506000600b805480602002602001604051908101604052809291908181526020018280548015611fae57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611f90575b5050505050905060008151905060008167ffffffffffffffff811115611fd657611fd6613403565b604051908082528060200260200182016040528015611fff578160200160208202803683370190505b50905060008267ffffffffffffffff81111561201d5761201d613403565b604051908082528060200260200182016040528015612046578160200160208202803683370190505b50905060005b838110156122ae5760006008600087848151811061206c5761206c613820565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000160029054906101000a90046001600160601b03166001600160601b031690506000600860008885815181106120ce576120ce613820565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000160026101000a8154816001600160601b0302191690836001600160601b0316021790555060008783601f811061213157612131613820565b6020020151600254908a0363ffffffff9081169250600160901b909104168102633b9aca0002820180156122a3576000601060008a878151811061217757612177613820565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b03169050808786815181106121c8576121c8613820565b60200260200101906001600160a01b031690816001600160a01b031681525050818686815181106121fb576121fb613820565b6020026020010181815250508a8a86601f811061221a5761221a613820565b602002019063ffffffff16908163ffffffff16815250508b6001600160a01b0316816001600160a01b03168a878151811061225757612257613820565b60200260200101516001600160a01b03167fd0b1dac935d85bd54cf0a33b0d41d39f8cf53a968465fc7ea2377526b8ac712c8560405161229991815260200190565b60405180910390a4505b50505060010161204c565b506122bc600c86601f61307a565b5080511561235e576040517f73433a2f0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906373433a2f9061232b9085908590600401613b6b565b600060405180830381600087803b15801561234557600080fd5b505af1158015612359573d6000803e3d6000fd5b505050505b50505050505050565b6001600160a01b0381166000908152600860209081526040918290208251606081018452905460ff80821615158084526101008304909116938301939093526201000090046001600160601b0316928101929092526123c4575050565b60006123cf836104e2565b90508015611e9b576001600160a01b0383811660009081526010602090815260409091205460025491850151921691660100000000000090910463ffffffff1690600c9060ff16601f811061242657612426613820565b6008808204909201805463ffffffff9485166004600790941684026101000a90810295021916939093179092556001600160a01b03808716600090815260209290925260409182902080546dffffffffffffffffffffffff00001916905590517ff99b1d680000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000009091169163f99b1d68916124f69185918791016001600160a01b03929092168252602082015260400190565b600060405180830381600087803b15801561251057600080fd5b505af1158015612524573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316856001600160a01b03167fd0b1dac935d85bd54cf0a33b0d41d39f8cf53a968465fc7ea2377526b8ac712c8560405161259791815260200190565b60405180910390a450505050565b6000546001600160a01b031633146125ff5760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610623565b565b600061260e826020613871565b612619856020613871565b61262588610144613890565b61262f9190613890565b6126399190613890565b612644906000613890565b905036811461235e5760405162461bcd60e51b815260206004820152601860248201527f63616c6c64617461206c656e677468206d69736d6174636800000000000000006044820152606401610623565b600080828060200190518101906126ac9190613db8565b64ffffffffff851660208801526040870180519192506126cb82613f8d565b63ffffffff1663ffffffff168152505085600260008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548164ffffffffff021916908364ffffffffff16021790555060408201518160000160066101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600a6101000a81548163ffffffff021916908363ffffffff160217905550608082015181600001600e6101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160000160126101000a81548163ffffffff021916908363ffffffff16021790555060c08201518160000160166101000a81548163ffffffff021916908363ffffffff16021790555060e082015181600001601a6101000a81548162ffffff021916908362ffffff1602179055509050506000816040015167ffffffffffffffff164090508082606001511461288857606082015160408084015190517faed0afe500000000000000000000000000000000000000000000000000000000815260048101929092526024820183905267ffffffffffffffff166044820152606401610623565b81516020830151604080850151606086015191517f098ace260000000000000000000000000000000000000000000000000000000081526000946001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169463098ace2694612904949293919291600401614099565b6000604051808303816000875af1158015612923573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261294b919081019061418e565b90508564ffffffffff16886040015163ffffffff167fe0c90b8e55243fcba0f8b68b201983b97f7a3d5aebd6dfa1a4082a07925cc7443386602001518b866040516129999493929190614257565b60405180910390a350506020015195945050505050565b60006129d7633b9aca003a04866080015163ffffffff16876060015163ffffffff16612eb6565b90506010360260005a90506000612a008663ffffffff1685858b60e0015162ffffff1686612edc565b90506000670de0b6b3a76400006001600160c01b03891683026001600160a01b03881660009081526008602052604090205460c08c01519290910492506201000090046001600160601b039081169163ffffffff16633b9aca000282840101908116821115612a755750505050505050612abf565b6001600160a01b038816600090815260086020526040902080546001600160601b0390921662010000026dffffffffffffffffffffffff0000199092169190911790555050505050505b50505050565b600080600b805480602002602001604051908101604052809291908181526020018280548015612b1e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612b00575b50508351600254604080516103e08101918290529697509195660100000000000090910463ffffffff169450600093509150600c90601f908285855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411612b5a5790505050505050905060005b83811015612bed578181601f8110612bba57612bba613820565b6020020151612bc9908461384c565b612bd99063ffffffff1687613890565b955080612be581613916565b915050612ba0565b50600254612c0c90600160901b900463ffffffff16633b9aca00613871565b612c169086613871565b945060005b83811015612c8a5760086000868381518110612c3957612c39613820565b6020908102919091018101516001600160a01b0316825281019190915260400160002054612c76906201000090046001600160601b031687613890565b955080612c8281613916565b915050612c1b565b505050505090565b600081831015612ca3575081612ca6565b50805b92915050565b806000106104405760405162461bcd60e51b815260206004820152601260248201527f66206d75737420626520706f73697469766500000000000000000000000000006044820152606401610623565b6000808a8a8a8a8a8a8a8a8a604051602001612d20999897969594939291906142df565b60408051601f1981840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b612d938282612f40565b5050565b336001600160a01b03821603612def5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610623565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6012546001600160a01b039081169082168114612d9357601280546001600160a01b0319166001600160a01b0384811691821790925560408051928416835260208301919091527f793cb73064f3c8cde7e187ae515511e6e56d1ee89bf08b82fa60fb70f8d48912910160405180910390a15050565b60008383811015612ec957600285850304015b612ed38184612c92565b95945050505050565b600081861015612f2e5760405162461bcd60e51b815260206004820181905260248201527f6c6566744761732063616e6e6f742065786365656420696e697469616c4761736044820152606401610623565b50633b9aca0094039190910101020290565b610100818114612f82578282826040517fb93aa5de00000000000000000000000000000000000000000000000000000000815260040161062393929190614367565b6000612f908385018561438b565b90506040517f8eef585f0000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638eef585f906113cd908490600401614413565b5080546000825590600052602060002090810190610440919061310d565b82805482825590600052602060002090810192821561306a579160200282015b8281111561306a57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613035565b5061307692915061310d565b5090565b60048301918390821561306a5791602002820160005b838211156130d457835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302613090565b80156131045782816101000a81549063ffffffff02191690556004016020816003010492830192600103026130d4565b50506130769291505b5b80821115613076576000815560010161310e565b6001600160a01b038116811461044057600080fd5b60006020828403121561314957600080fd5b8135611d6081613122565b60005b8381101561316f578181015183820152602001613157565b83811115612abf5750506000910152565b60008151808452613198816020860160208601613154565b601f01601f19169290920160200192915050565b602081526000611d606020830184613180565b803563ffffffff811681146131d357600080fd5b919050565b62ffffff8116811461044057600080fd5b600080600080600060a0868803121561320157600080fd5b61320a866131bf565b9450613218602087016131bf565b9350613226604087016131bf565b9250613234606087016131bf565b91506080860135613244816131d8565b809150509295509295909350565b60008083601f84011261326457600080fd5b50813567ffffffffffffffff81111561327c57600080fd5b6020830191508360208260051b850101111561329757600080fd5b9250929050565b600080600080604085870312156132b457600080fd5b843567ffffffffffffffff808211156132cc57600080fd5b6132d888838901613252565b909650945060208701359150808211156132f157600080fd5b506132fe87828801613252565b95989497509550505050565b60008083601f84011261331c57600080fd5b50813567ffffffffffffffff81111561333457600080fd5b60208301915083602082850101111561329757600080fd5b60008060008060008060008060e0898b03121561336857600080fd5b606089018a81111561337957600080fd5b8998503567ffffffffffffffff8082111561339357600080fd5b61339f8c838d0161330a565b909950975060808b01359150808211156133b857600080fd5b6133c48c838d01613252565b909750955060a08b01359150808211156133dd57600080fd5b506133ea8b828c01613252565b999c989b50969995989497949560c00135949350505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561343c5761343c613403565b60405290565b60405160c0810167ffffffffffffffff8111828210171561343c5761343c613403565b6040516080810167ffffffffffffffff8111828210171561343c5761343c613403565b6040516020810167ffffffffffffffff8111828210171561343c5761343c613403565b604051601f8201601f1916810167ffffffffffffffff811182821017156134d4576134d4613403565b604052919050565b600067ffffffffffffffff8211156134f6576134f6613403565b50601f01601f191660200190565b600067ffffffffffffffff82111561351e5761351e613403565b5060051b60200190565b600082601f83011261353957600080fd5b8135602061354e61354983613504565b6134ab565b82815260059290921b8401810191818101908684111561356d57600080fd5b8286015b848110156135885780358352918301918301613571565b509695505050505050565b600060208083850312156135a657600080fd5b823567ffffffffffffffff808211156135be57600080fd5b90840190604082870312156135d257600080fd5b6135da613419565b8235828111156135e957600080fd5b8301601f810188136135fa57600080fd5b8035613608613549826134dc565b818152898783850101111561361c57600080fd5b81878401888301376000878383010152808452505050838301358281111561364357600080fd5b61364f88828601613528565b948201949094529695505050505050565b6000806040838503121561367357600080fd5b823561367e81613122565b946020939093013593505050565b60006020828403121561369e57600080fd5b813567ffffffffffffffff8111156136b557600080fd5b820160808185031215611d6057600080fd5b803560ff811681146131d357600080fd5b67ffffffffffffffff8116811461044057600080fd5b80356131d3816136d8565b60008060008060008060008060008060c08b8d03121561371857600080fd5b8a3567ffffffffffffffff8082111561373057600080fd5b61373c8e838f01613252565b909c509a5060208d013591508082111561375557600080fd5b6137618e838f01613252565b909a50985088915061377560408e016136c7565b975060608d013591508082111561378b57600080fd5b6137978e838f0161330a565b90975095508591506137ab60808e016136ee565b945060a08d01359150808211156137c157600080fd5b506137ce8d828e0161330a565b915080935050809150509295989b9194979a5092959850565b600080604083850312156137fa57600080fd5b823561380581613122565b9150602083013561381581613122565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8381169083168181101561386957613869613836565b039392505050565b600081600019048311821515161561388b5761388b613836565b500290565b600082198211156138a3576138a3613836565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0384168152604060208201526000612ed36040830184866138a8565b60006020828403121561390657600080fd5b81518015158114611d6057600080fd5b60006001820161392857613928613836565b5060010190565b600060ff821660ff84168060ff0382111561394c5761394c613836565b019392505050565b8183823760009101908152919050565b8281526060826020830137600060809190910190815292915050565b60008251613992818460208701613154565b9190910192915050565b6000602082840312156139ae57600080fd5b5051919050565b6000828210156139c7576139c7613836565b500390565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615613a0657613a06613836565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615613a3a57613a3a613836565b50500390565b600060ff821660ff84168160ff0481118215151615613a6157613a61613836565b029392505050565b600063ffffffff808316818516808303821115613a8857613a88613836565b01949350505050565b600081518084526020808501945080840160005b83811015613aca5781516001600160a01b031687529582019590820190600101613aa5565b509495945050505050565b600061012063ffffffff808d1684528b6020850152808b16604085015250806060840152613b058184018a613a91565b90508281036080840152613b198189613a91565b905060ff871660a084015282810360c0840152613b368187613180565b905067ffffffffffffffff851660e0840152828103610100840152613b5b8185613180565b9c9b505050505050505050505050565b604081526000613b7e6040830185613a91565b82810360208481019190915284518083528582019282019060005b81811015613bb557845183529383019391830191600101613b99565b5090979650505050505050565b80516131d3816136d8565b805161ffff811681146131d357600080fd5b80516131d381613122565b600082601f830112613bfb57600080fd5b8151613c09613549826134dc565b818152846020838601011115613c1e57600080fd5b6105e2826020830160208701613154565b80516001600160601b03811681146131d357600080fd5b600082601f830112613c5757600080fd5b81516020613c6761354983613504565b82815260059290921b84018101918181019086841115613c8657600080fd5b8286015b8481101561358857805167ffffffffffffffff80821115613caa57600080fd5b90880190601f196040838c0382011215613cc357600080fd5b613ccb613419565b8784015183811115613cdc57600080fd5b840160c0818e0384011215613cf057600080fd5b613cf8613442565b92508881015165ffffffffffff81168114613d1257600080fd5b8352613d2060408201613bcd565b89840152613d3060608201613bdf565b6040840152608081015184811115613d4757600080fd5b613d558e8b83850101613bea565b606085015250613d6760a08201613bc2565b6080840152613d7860c08201613c2f565b60a084015250818152613d8d60408501613c2f565b818901528652505050918301918301613c8a565b80516001600160c01b03811681146131d357600080fd5b600060208284031215613dca57600080fd5b815167ffffffffffffffff80821115613de257600080fd5b9083019060808286031215613df657600080fd5b613dfe613465565b825182811115613e0d57600080fd5b8301601f81018713613e1e57600080fd5b8051613e2c61354982613504565b8082825260208201915060208360051b850101925089831115613e4e57600080fd5b602084015b83811015613f4e57805187811115613e6a57600080fd5b850160a0818d03601f19011215613e8057600080fd5b613e88613465565b6020820151613e96816136d8565b81526040820151613ea6816131d8565b60208201526040828e03605f19011215613ebf57600080fd5b613ec7613488565b8d607f840112613ed657600080fd5b613ede613419565b808f60a086011115613eef57600080fd5b606085015b60a08601811015613f0f578051835260209283019201613ef4565b50825250604082015260a082015189811115613f2a57600080fd5b613f398e602083860101613c46565b60608301525084525060209283019201613e53565b50845250613f6191505060208401613da1565b6020820152613f7260408401613bc2565b60408201526060830151606082015280935050505092915050565b600063ffffffff808316818103613fa657613fa6613836565b6001019392505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561408c57828403895281516040815181875265ffffffffffff8151168288015287810151606061ffff8216818a0152838301519350608091506001600160a01b038416828a01528083015193505060c060a081818b01526140376101008b0186613180565b9284015167ffffffffffffffff16918a0191909152909101516001600160601b031660e088015291870151919050614079878701836001600160601b03169052565b9986019994505090840190600101613fce565b5091979650505050505050565b6000608080830181845280885180835260a092508286019150828160051b8701016020808c016000805b85811015614149578a8503609f190187528251805167ffffffffffffffff1686528481015162ffffff16858701526040808201515190849088015b600282101561411d5782518152918701916001919091019087016140fe565b50505060600151858a01899052614136868a0182613fb0565b97850197955050918301916001016140c3565b5050508196506141638189018c6001600160c01b03169052565b50505050505061417f604083018567ffffffffffffffff169052565b82606083015295945050505050565b600060208083850312156141a157600080fd5b825167ffffffffffffffff8111156141b857600080fd5b8301601f810185136141c957600080fd5b80516141d761354982613504565b81815260069190911b820183019083810190878311156141f657600080fd5b928401925b8284101561424c57604084890312156142145760008081fd5b61421c613419565b8451614227816136d8565b815284860151614236816131d8565b81870152825260409390930192908401906141fb565b979650505050505050565b6000608082016001600160a01b038716835260206001600160c01b03871681850152604086818601526080606086015282865180855260a087019150838801945060005b818110156142cf578551805167ffffffffffffffff16845285015162ffffff1685840152948401949183019160010161429b565b50909a9950505050505050505050565b60006101208b83526001600160a01b038b16602084015267ffffffffffffffff808b1660408501528160608501526143198285018b613a91565b9150838203608085015261432d828a613a91565b915060ff881660a085015283820360c085015261434a8288613180565b90861660e08501528381036101008501529050613b5b8185613180565b60408152600061437b6040830185876138a8565b9050826020830152949350505050565b600061010080838503121561439f57600080fd5b83601f8401126143ae57600080fd5b60405181810181811067ffffffffffffffff821117156143d0576143d0613403565b6040529083019080858311156143e557600080fd5b845b838110156144085780356143fa816131d8565b8252602091820191016143e7565b509095945050505050565b6101008101818360005b600881101561444157815162ffffff1683526020928301929091019060010161441d565b5050509291505056fea164736f6c634300080f000a",
}

var ArbitrumVRFBeaconABI = ArbitrumVRFBeaconMetaData.ABI

var ArbitrumVRFBeaconBin = ArbitrumVRFBeaconMetaData.Bin

func DeployArbitrumVRFBeacon(auth *bind.TransactOpts, backend bind.ContractBackend, link common.Address, coordinator common.Address, keyProvider common.Address, keyID [32]byte) (common.Address, *types.Transaction, *ArbitrumVRFBeacon, error) {
	parsed, err := ArbitrumVRFBeaconMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ArbitrumVRFBeaconBin), backend, link, coordinator, keyProvider, keyID)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ArbitrumVRFBeacon{ArbitrumVRFBeaconCaller: ArbitrumVRFBeaconCaller{contract: contract}, ArbitrumVRFBeaconTransactor: ArbitrumVRFBeaconTransactor{contract: contract}, ArbitrumVRFBeaconFilterer: ArbitrumVRFBeaconFilterer{contract: contract}}, nil
}

type ArbitrumVRFBeacon struct {
	address common.Address
	abi     abi.ABI
	ArbitrumVRFBeaconCaller
	ArbitrumVRFBeaconTransactor
	ArbitrumVRFBeaconFilterer
}

type ArbitrumVRFBeaconCaller struct {
	contract *bind.BoundContract
}

type ArbitrumVRFBeaconTransactor struct {
	contract *bind.BoundContract
}

type ArbitrumVRFBeaconFilterer struct {
	contract *bind.BoundContract
}

type ArbitrumVRFBeaconSession struct {
	Contract     *ArbitrumVRFBeacon
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type ArbitrumVRFBeaconCallerSession struct {
	Contract *ArbitrumVRFBeaconCaller
	CallOpts bind.CallOpts
}

type ArbitrumVRFBeaconTransactorSession struct {
	Contract     *ArbitrumVRFBeaconTransactor
	TransactOpts bind.TransactOpts
}

type ArbitrumVRFBeaconRaw struct {
	Contract *ArbitrumVRFBeacon
}

type ArbitrumVRFBeaconCallerRaw struct {
	Contract *ArbitrumVRFBeaconCaller
}

type ArbitrumVRFBeaconTransactorRaw struct {
	Contract *ArbitrumVRFBeaconTransactor
}

func NewArbitrumVRFBeacon(address common.Address, backend bind.ContractBackend) (*ArbitrumVRFBeacon, error) {
	abi, err := abi.JSON(strings.NewReader(ArbitrumVRFBeaconABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindArbitrumVRFBeacon(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFBeacon{address: address, abi: abi, ArbitrumVRFBeaconCaller: ArbitrumVRFBeaconCaller{contract: contract}, ArbitrumVRFBeaconTransactor: ArbitrumVRFBeaconTransactor{contract: contract}, ArbitrumVRFBeaconFilterer: ArbitrumVRFBeaconFilterer{contract: contract}}, nil
}

func NewArbitrumVRFBeaconCaller(address common.Address, caller bind.ContractCaller) (*ArbitrumVRFBeaconCaller, error) {
	contract, err := bindArbitrumVRFBeacon(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFBeaconCaller{contract: contract}, nil
}

func NewArbitrumVRFBeaconTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbitrumVRFBeaconTransactor, error) {
	contract, err := bindArbitrumVRFBeacon(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFBeaconTransactor{contract: contract}, nil
}

func NewArbitrumVRFBeaconFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbitrumVRFBeaconFilterer, error) {
	contract, err := bindArbitrumVRFBeacon(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFBeaconFilterer{contract: contract}, nil
}

func bindArbitrumVRFBeacon(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ArbitrumVRFBeaconABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbitrumVRFBeacon.Contract.ArbitrumVRFBeaconCaller.contract.Call(opts, result, method, params...)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.ArbitrumVRFBeaconTransactor.contract.Transfer(opts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.ArbitrumVRFBeaconTransactor.contract.Transact(opts, method, params...)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbitrumVRFBeacon.Contract.contract.Call(opts, result, method, params...)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.contract.Transfer(opts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.contract.Transact(opts, method, params...)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCaller) COORDINATOR(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbitrumVRFBeacon.contract.Call(opts, &out, "COORDINATOR")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) COORDINATOR() (common.Address, error) {
	return _ArbitrumVRFBeacon.Contract.COORDINATOR(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCallerSession) COORDINATOR() (common.Address, error) {
	return _ArbitrumVRFBeacon.Contract.COORDINATOR(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCaller) LINK(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbitrumVRFBeacon.contract.Call(opts, &out, "LINK")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) LINK() (common.Address, error) {
	return _ArbitrumVRFBeacon.Contract.LINK(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCallerSession) LINK() (common.Address, error) {
	return _ArbitrumVRFBeacon.Contract.LINK(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCaller) NUMCONFDELAYS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ArbitrumVRFBeacon.contract.Call(opts, &out, "NUM_CONF_DELAYS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) NUMCONFDELAYS() (uint8, error) {
	return _ArbitrumVRFBeacon.Contract.NUMCONFDELAYS(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCallerSession) NUMCONFDELAYS() (uint8, error) {
	return _ArbitrumVRFBeacon.Contract.NUMCONFDELAYS(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCaller) GetBilling(opts *bind.CallOpts) (GetBilling,

	error) {
	var out []interface{}
	err := _ArbitrumVRFBeacon.contract.Call(opts, &out, "getBilling")

	outstruct := new(GetBilling)
	if err != nil {
		return *outstruct, err
	}

	outstruct.MaximumGasPriceGwei = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.ReasonableGasPriceGwei = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ObservationPaymentGjuels = *abi.ConvertType(out[2], new(uint32)).(*uint32)
	outstruct.TransmissionPaymentGjuels = *abi.ConvertType(out[3], new(uint32)).(*uint32)
	outstruct.AccountingGas = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) GetBilling() (GetBilling,

	error) {
	return _ArbitrumVRFBeacon.Contract.GetBilling(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCallerSession) GetBilling() (GetBilling,

	error) {
	return _ArbitrumVRFBeacon.Contract.GetBilling(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCaller) GetBillingAccessController(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbitrumVRFBeacon.contract.Call(opts, &out, "getBillingAccessController")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) GetBillingAccessController() (common.Address, error) {
	return _ArbitrumVRFBeacon.Contract.GetBillingAccessController(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCallerSession) GetBillingAccessController() (common.Address, error) {
	return _ArbitrumVRFBeacon.Contract.GetBillingAccessController(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _ArbitrumVRFBeacon.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _ArbitrumVRFBeacon.Contract.LatestConfigDetails(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _ArbitrumVRFBeacon.Contract.LatestConfigDetails(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _ArbitrumVRFBeacon.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _ArbitrumVRFBeacon.Contract.LatestConfigDigestAndEpoch(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _ArbitrumVRFBeacon.Contract.LatestConfigDigestAndEpoch(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCaller) LinkAvailableForPayment(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumVRFBeacon.contract.Call(opts, &out, "linkAvailableForPayment")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) LinkAvailableForPayment() (*big.Int, error) {
	return _ArbitrumVRFBeacon.Contract.LinkAvailableForPayment(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCallerSession) LinkAvailableForPayment() (*big.Int, error) {
	return _ArbitrumVRFBeacon.Contract.LinkAvailableForPayment(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCaller) OracleObservationCount(opts *bind.CallOpts, transmitterAddress common.Address) (uint32, error) {
	var out []interface{}
	err := _ArbitrumVRFBeacon.contract.Call(opts, &out, "oracleObservationCount", transmitterAddress)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) OracleObservationCount(transmitterAddress common.Address) (uint32, error) {
	return _ArbitrumVRFBeacon.Contract.OracleObservationCount(&_ArbitrumVRFBeacon.CallOpts, transmitterAddress)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCallerSession) OracleObservationCount(transmitterAddress common.Address) (uint32, error) {
	return _ArbitrumVRFBeacon.Contract.OracleObservationCount(&_ArbitrumVRFBeacon.CallOpts, transmitterAddress)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCaller) OwedPayment(opts *bind.CallOpts, transmitterAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumVRFBeacon.contract.Call(opts, &out, "owedPayment", transmitterAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) OwedPayment(transmitterAddress common.Address) (*big.Int, error) {
	return _ArbitrumVRFBeacon.Contract.OwedPayment(&_ArbitrumVRFBeacon.CallOpts, transmitterAddress)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCallerSession) OwedPayment(transmitterAddress common.Address) (*big.Int, error) {
	return _ArbitrumVRFBeacon.Contract.OwedPayment(&_ArbitrumVRFBeacon.CallOpts, transmitterAddress)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbitrumVRFBeacon.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) Owner() (common.Address, error) {
	return _ArbitrumVRFBeacon.Contract.Owner(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCallerSession) Owner() (common.Address, error) {
	return _ArbitrumVRFBeacon.Contract.Owner(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCaller) SKeyID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ArbitrumVRFBeacon.contract.Call(opts, &out, "s_keyID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) SKeyID() ([32]byte, error) {
	return _ArbitrumVRFBeacon.Contract.SKeyID(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCallerSession) SKeyID() ([32]byte, error) {
	return _ArbitrumVRFBeacon.Contract.SKeyID(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCaller) SProvingKeyHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ArbitrumVRFBeacon.contract.Call(opts, &out, "s_provingKeyHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) SProvingKeyHash() ([32]byte, error) {
	return _ArbitrumVRFBeacon.Contract.SProvingKeyHash(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCallerSession) SProvingKeyHash() ([32]byte, error) {
	return _ArbitrumVRFBeacon.Contract.SProvingKeyHash(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ArbitrumVRFBeacon.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) TypeAndVersion() (string, error) {
	return _ArbitrumVRFBeacon.Contract.TypeAndVersion(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconCallerSession) TypeAndVersion() (string, error) {
	return _ArbitrumVRFBeacon.Contract.TypeAndVersion(&_ArbitrumVRFBeacon.CallOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.contract.Transact(opts, "acceptOwnership")
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) AcceptOwnership() (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.AcceptOwnership(&_ArbitrumVRFBeacon.TransactOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.AcceptOwnership(&_ArbitrumVRFBeacon.TransactOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactor) AcceptPayeeship(opts *bind.TransactOpts, transmitter common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.contract.Transact(opts, "acceptPayeeship", transmitter)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) AcceptPayeeship(transmitter common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.AcceptPayeeship(&_ArbitrumVRFBeacon.TransactOpts, transmitter)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactorSession) AcceptPayeeship(transmitter common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.AcceptPayeeship(&_ArbitrumVRFBeacon.TransactOpts, transmitter)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactor) ExposeType(opts *bind.TransactOpts, arg0 VRFBeaconReportReport) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.contract.Transact(opts, "exposeType", arg0)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) ExposeType(arg0 VRFBeaconReportReport) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.ExposeType(&_ArbitrumVRFBeacon.TransactOpts, arg0)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactorSession) ExposeType(arg0 VRFBeaconReportReport) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.ExposeType(&_ArbitrumVRFBeacon.TransactOpts, arg0)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactor) KeyGenerated(opts *bind.TransactOpts, kd KeyDataStructKeyData) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.contract.Transact(opts, "keyGenerated", kd)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) KeyGenerated(kd KeyDataStructKeyData) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.KeyGenerated(&_ArbitrumVRFBeacon.TransactOpts, kd)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactorSession) KeyGenerated(kd KeyDataStructKeyData) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.KeyGenerated(&_ArbitrumVRFBeacon.TransactOpts, kd)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactor) NewKeyRequested(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.contract.Transact(opts, "newKeyRequested")
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) NewKeyRequested() (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.NewKeyRequested(&_ArbitrumVRFBeacon.TransactOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactorSession) NewKeyRequested() (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.NewKeyRequested(&_ArbitrumVRFBeacon.TransactOpts)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactor) SetBilling(opts *bind.TransactOpts, maximumGasPriceGwei uint32, reasonableGasPriceGwei uint32, observationPaymentGjuels uint32, transmissionPaymentGjuels uint32, accountingGas *big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.contract.Transact(opts, "setBilling", maximumGasPriceGwei, reasonableGasPriceGwei, observationPaymentGjuels, transmissionPaymentGjuels, accountingGas)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) SetBilling(maximumGasPriceGwei uint32, reasonableGasPriceGwei uint32, observationPaymentGjuels uint32, transmissionPaymentGjuels uint32, accountingGas *big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.SetBilling(&_ArbitrumVRFBeacon.TransactOpts, maximumGasPriceGwei, reasonableGasPriceGwei, observationPaymentGjuels, transmissionPaymentGjuels, accountingGas)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactorSession) SetBilling(maximumGasPriceGwei uint32, reasonableGasPriceGwei uint32, observationPaymentGjuels uint32, transmissionPaymentGjuels uint32, accountingGas *big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.SetBilling(&_ArbitrumVRFBeacon.TransactOpts, maximumGasPriceGwei, reasonableGasPriceGwei, observationPaymentGjuels, transmissionPaymentGjuels, accountingGas)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactor) SetBillingAccessController(opts *bind.TransactOpts, _billingAccessController common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.contract.Transact(opts, "setBillingAccessController", _billingAccessController)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) SetBillingAccessController(_billingAccessController common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.SetBillingAccessController(&_ArbitrumVRFBeacon.TransactOpts, _billingAccessController)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactorSession) SetBillingAccessController(_billingAccessController common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.SetBillingAccessController(&_ArbitrumVRFBeacon.TransactOpts, _billingAccessController)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactor) SetConfig(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.contract.Transact(opts, "setConfig", signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) SetConfig(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.SetConfig(&_ArbitrumVRFBeacon.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactorSession) SetConfig(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.SetConfig(&_ArbitrumVRFBeacon.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactor) SetPayees(opts *bind.TransactOpts, transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.contract.Transact(opts, "setPayees", transmitters, payees)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) SetPayees(transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.SetPayees(&_ArbitrumVRFBeacon.TransactOpts, transmitters, payees)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactorSession) SetPayees(transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.SetPayees(&_ArbitrumVRFBeacon.TransactOpts, transmitters, payees)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.contract.Transact(opts, "transferOwnership", to)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.TransferOwnership(&_ArbitrumVRFBeacon.TransactOpts, to)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.TransferOwnership(&_ArbitrumVRFBeacon.TransactOpts, to)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactor) TransferPayeeship(opts *bind.TransactOpts, transmitter common.Address, proposed common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.contract.Transact(opts, "transferPayeeship", transmitter, proposed)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) TransferPayeeship(transmitter common.Address, proposed common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.TransferPayeeship(&_ArbitrumVRFBeacon.TransactOpts, transmitter, proposed)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactorSession) TransferPayeeship(transmitter common.Address, proposed common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.TransferPayeeship(&_ArbitrumVRFBeacon.TransactOpts, transmitter, proposed)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.Transmit(&_ArbitrumVRFBeacon.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.Transmit(&_ArbitrumVRFBeacon.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactor) WithdrawFunds(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.contract.Transact(opts, "withdrawFunds", recipient, amount)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) WithdrawFunds(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.WithdrawFunds(&_ArbitrumVRFBeacon.TransactOpts, recipient, amount)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactorSession) WithdrawFunds(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.WithdrawFunds(&_ArbitrumVRFBeacon.TransactOpts, recipient, amount)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactor) WithdrawPayment(opts *bind.TransactOpts, transmitter common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.contract.Transact(opts, "withdrawPayment", transmitter)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconSession) WithdrawPayment(transmitter common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.WithdrawPayment(&_ArbitrumVRFBeacon.TransactOpts, transmitter)
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconTransactorSession) WithdrawPayment(transmitter common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFBeacon.Contract.WithdrawPayment(&_ArbitrumVRFBeacon.TransactOpts, transmitter)
}

type ArbitrumVRFBeaconBillingAccessControllerSetIterator struct {
	Event *ArbitrumVRFBeaconBillingAccessControllerSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFBeaconBillingAccessControllerSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFBeaconBillingAccessControllerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFBeaconBillingAccessControllerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFBeaconBillingAccessControllerSetIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFBeaconBillingAccessControllerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFBeaconBillingAccessControllerSet struct {
	Old     common.Address
	Current common.Address
	Raw     types.Log
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) FilterBillingAccessControllerSet(opts *bind.FilterOpts) (*ArbitrumVRFBeaconBillingAccessControllerSetIterator, error) {

	logs, sub, err := _ArbitrumVRFBeacon.contract.FilterLogs(opts, "BillingAccessControllerSet")
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFBeaconBillingAccessControllerSetIterator{contract: _ArbitrumVRFBeacon.contract, event: "BillingAccessControllerSet", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) WatchBillingAccessControllerSet(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconBillingAccessControllerSet) (event.Subscription, error) {

	logs, sub, err := _ArbitrumVRFBeacon.contract.WatchLogs(opts, "BillingAccessControllerSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFBeaconBillingAccessControllerSet)
				if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "BillingAccessControllerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) ParseBillingAccessControllerSet(log types.Log) (*ArbitrumVRFBeaconBillingAccessControllerSet, error) {
	event := new(ArbitrumVRFBeaconBillingAccessControllerSet)
	if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "BillingAccessControllerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFBeaconBillingSetIterator struct {
	Event *ArbitrumVRFBeaconBillingSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFBeaconBillingSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFBeaconBillingSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFBeaconBillingSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFBeaconBillingSetIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFBeaconBillingSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFBeaconBillingSet struct {
	MaximumGasPriceGwei       uint32
	ReasonableGasPriceGwei    uint32
	ObservationPaymentGjuels  uint32
	TransmissionPaymentGjuels uint32
	AccountingGas             *big.Int
	Raw                       types.Log
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) FilterBillingSet(opts *bind.FilterOpts) (*ArbitrumVRFBeaconBillingSetIterator, error) {

	logs, sub, err := _ArbitrumVRFBeacon.contract.FilterLogs(opts, "BillingSet")
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFBeaconBillingSetIterator{contract: _ArbitrumVRFBeacon.contract, event: "BillingSet", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) WatchBillingSet(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconBillingSet) (event.Subscription, error) {

	logs, sub, err := _ArbitrumVRFBeacon.contract.WatchLogs(opts, "BillingSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFBeaconBillingSet)
				if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "BillingSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) ParseBillingSet(log types.Log) (*ArbitrumVRFBeaconBillingSet, error) {
	event := new(ArbitrumVRFBeaconBillingSet)
	if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "BillingSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFBeaconConfigSetIterator struct {
	Event *ArbitrumVRFBeaconConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFBeaconConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFBeaconConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFBeaconConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFBeaconConfigSetIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFBeaconConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFBeaconConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) FilterConfigSet(opts *bind.FilterOpts) (*ArbitrumVRFBeaconConfigSetIterator, error) {

	logs, sub, err := _ArbitrumVRFBeacon.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFBeaconConfigSetIterator{contract: _ArbitrumVRFBeacon.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconConfigSet) (event.Subscription, error) {

	logs, sub, err := _ArbitrumVRFBeacon.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFBeaconConfigSet)
				if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) ParseConfigSet(log types.Log) (*ArbitrumVRFBeaconConfigSet, error) {
	event := new(ArbitrumVRFBeaconConfigSet)
	if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFBeaconNewTransmissionIterator struct {
	Event *ArbitrumVRFBeaconNewTransmission

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFBeaconNewTransmissionIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFBeaconNewTransmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFBeaconNewTransmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFBeaconNewTransmissionIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFBeaconNewTransmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFBeaconNewTransmission struct {
	AggregatorRoundId uint32
	EpochAndRound     *big.Int
	Transmitter       common.Address
	JuelsPerFeeCoin   *big.Int
	ConfigDigest      [32]byte
	OutputsServed     []VRFBeaconTypesOutputServed
	Raw               types.Log
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) FilterNewTransmission(opts *bind.FilterOpts, aggregatorRoundId []uint32, epochAndRound []*big.Int) (*ArbitrumVRFBeaconNewTransmissionIterator, error) {

	var aggregatorRoundIdRule []interface{}
	for _, aggregatorRoundIdItem := range aggregatorRoundId {
		aggregatorRoundIdRule = append(aggregatorRoundIdRule, aggregatorRoundIdItem)
	}
	var epochAndRoundRule []interface{}
	for _, epochAndRoundItem := range epochAndRound {
		epochAndRoundRule = append(epochAndRoundRule, epochAndRoundItem)
	}

	logs, sub, err := _ArbitrumVRFBeacon.contract.FilterLogs(opts, "NewTransmission", aggregatorRoundIdRule, epochAndRoundRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFBeaconNewTransmissionIterator{contract: _ArbitrumVRFBeacon.contract, event: "NewTransmission", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) WatchNewTransmission(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconNewTransmission, aggregatorRoundId []uint32, epochAndRound []*big.Int) (event.Subscription, error) {

	var aggregatorRoundIdRule []interface{}
	for _, aggregatorRoundIdItem := range aggregatorRoundId {
		aggregatorRoundIdRule = append(aggregatorRoundIdRule, aggregatorRoundIdItem)
	}
	var epochAndRoundRule []interface{}
	for _, epochAndRoundItem := range epochAndRound {
		epochAndRoundRule = append(epochAndRoundRule, epochAndRoundItem)
	}

	logs, sub, err := _ArbitrumVRFBeacon.contract.WatchLogs(opts, "NewTransmission", aggregatorRoundIdRule, epochAndRoundRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFBeaconNewTransmission)
				if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "NewTransmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) ParseNewTransmission(log types.Log) (*ArbitrumVRFBeaconNewTransmission, error) {
	event := new(ArbitrumVRFBeaconNewTransmission)
	if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "NewTransmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFBeaconOraclePaidIterator struct {
	Event *ArbitrumVRFBeaconOraclePaid

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFBeaconOraclePaidIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFBeaconOraclePaid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFBeaconOraclePaid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFBeaconOraclePaidIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFBeaconOraclePaidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFBeaconOraclePaid struct {
	Transmitter common.Address
	Payee       common.Address
	Amount      *big.Int
	LinkToken   common.Address
	Raw         types.Log
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) FilterOraclePaid(opts *bind.FilterOpts, transmitter []common.Address, payee []common.Address, linkToken []common.Address) (*ArbitrumVRFBeaconOraclePaidIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var payeeRule []interface{}
	for _, payeeItem := range payee {
		payeeRule = append(payeeRule, payeeItem)
	}

	var linkTokenRule []interface{}
	for _, linkTokenItem := range linkToken {
		linkTokenRule = append(linkTokenRule, linkTokenItem)
	}

	logs, sub, err := _ArbitrumVRFBeacon.contract.FilterLogs(opts, "OraclePaid", transmitterRule, payeeRule, linkTokenRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFBeaconOraclePaidIterator{contract: _ArbitrumVRFBeacon.contract, event: "OraclePaid", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) WatchOraclePaid(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconOraclePaid, transmitter []common.Address, payee []common.Address, linkToken []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var payeeRule []interface{}
	for _, payeeItem := range payee {
		payeeRule = append(payeeRule, payeeItem)
	}

	var linkTokenRule []interface{}
	for _, linkTokenItem := range linkToken {
		linkTokenRule = append(linkTokenRule, linkTokenItem)
	}

	logs, sub, err := _ArbitrumVRFBeacon.contract.WatchLogs(opts, "OraclePaid", transmitterRule, payeeRule, linkTokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFBeaconOraclePaid)
				if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "OraclePaid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) ParseOraclePaid(log types.Log) (*ArbitrumVRFBeaconOraclePaid, error) {
	event := new(ArbitrumVRFBeaconOraclePaid)
	if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "OraclePaid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFBeaconOwnershipTransferRequestedIterator struct {
	Event *ArbitrumVRFBeaconOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFBeaconOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFBeaconOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFBeaconOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFBeaconOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFBeaconOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFBeaconOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ArbitrumVRFBeaconOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ArbitrumVRFBeacon.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFBeaconOwnershipTransferRequestedIterator{contract: _ArbitrumVRFBeacon.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ArbitrumVRFBeacon.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFBeaconOwnershipTransferRequested)
				if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) ParseOwnershipTransferRequested(log types.Log) (*ArbitrumVRFBeaconOwnershipTransferRequested, error) {
	event := new(ArbitrumVRFBeaconOwnershipTransferRequested)
	if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFBeaconOwnershipTransferredIterator struct {
	Event *ArbitrumVRFBeaconOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFBeaconOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFBeaconOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFBeaconOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFBeaconOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFBeaconOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFBeaconOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ArbitrumVRFBeaconOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ArbitrumVRFBeacon.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFBeaconOwnershipTransferredIterator{contract: _ArbitrumVRFBeacon.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ArbitrumVRFBeacon.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFBeaconOwnershipTransferred)
				if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) ParseOwnershipTransferred(log types.Log) (*ArbitrumVRFBeaconOwnershipTransferred, error) {
	event := new(ArbitrumVRFBeaconOwnershipTransferred)
	if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFBeaconPayeeshipTransferRequestedIterator struct {
	Event *ArbitrumVRFBeaconPayeeshipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFBeaconPayeeshipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFBeaconPayeeshipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFBeaconPayeeshipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFBeaconPayeeshipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFBeaconPayeeshipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFBeaconPayeeshipTransferRequested struct {
	Transmitter common.Address
	Current     common.Address
	Proposed    common.Address
	Raw         types.Log
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) FilterPayeeshipTransferRequested(opts *bind.FilterOpts, transmitter []common.Address, current []common.Address, proposed []common.Address) (*ArbitrumVRFBeaconPayeeshipTransferRequestedIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}
	var proposedRule []interface{}
	for _, proposedItem := range proposed {
		proposedRule = append(proposedRule, proposedItem)
	}

	logs, sub, err := _ArbitrumVRFBeacon.contract.FilterLogs(opts, "PayeeshipTransferRequested", transmitterRule, currentRule, proposedRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFBeaconPayeeshipTransferRequestedIterator{contract: _ArbitrumVRFBeacon.contract, event: "PayeeshipTransferRequested", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) WatchPayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconPayeeshipTransferRequested, transmitter []common.Address, current []common.Address, proposed []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}
	var proposedRule []interface{}
	for _, proposedItem := range proposed {
		proposedRule = append(proposedRule, proposedItem)
	}

	logs, sub, err := _ArbitrumVRFBeacon.contract.WatchLogs(opts, "PayeeshipTransferRequested", transmitterRule, currentRule, proposedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFBeaconPayeeshipTransferRequested)
				if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "PayeeshipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) ParsePayeeshipTransferRequested(log types.Log) (*ArbitrumVRFBeaconPayeeshipTransferRequested, error) {
	event := new(ArbitrumVRFBeaconPayeeshipTransferRequested)
	if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "PayeeshipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFBeaconPayeeshipTransferredIterator struct {
	Event *ArbitrumVRFBeaconPayeeshipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFBeaconPayeeshipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFBeaconPayeeshipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFBeaconPayeeshipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFBeaconPayeeshipTransferredIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFBeaconPayeeshipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFBeaconPayeeshipTransferred struct {
	Transmitter common.Address
	Previous    common.Address
	Current     common.Address
	Raw         types.Log
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) FilterPayeeshipTransferred(opts *bind.FilterOpts, transmitter []common.Address, previous []common.Address, current []common.Address) (*ArbitrumVRFBeaconPayeeshipTransferredIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var previousRule []interface{}
	for _, previousItem := range previous {
		previousRule = append(previousRule, previousItem)
	}
	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}

	logs, sub, err := _ArbitrumVRFBeacon.contract.FilterLogs(opts, "PayeeshipTransferred", transmitterRule, previousRule, currentRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFBeaconPayeeshipTransferredIterator{contract: _ArbitrumVRFBeacon.contract, event: "PayeeshipTransferred", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) WatchPayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconPayeeshipTransferred, transmitter []common.Address, previous []common.Address, current []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var previousRule []interface{}
	for _, previousItem := range previous {
		previousRule = append(previousRule, previousItem)
	}
	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}

	logs, sub, err := _ArbitrumVRFBeacon.contract.WatchLogs(opts, "PayeeshipTransferred", transmitterRule, previousRule, currentRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFBeaconPayeeshipTransferred)
				if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "PayeeshipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeaconFilterer) ParsePayeeshipTransferred(log types.Log) (*ArbitrumVRFBeaconPayeeshipTransferred, error) {
	event := new(ArbitrumVRFBeaconPayeeshipTransferred)
	if err := _ArbitrumVRFBeacon.contract.UnpackLog(event, "PayeeshipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type GetBilling struct {
	MaximumGasPriceGwei       uint32
	ReasonableGasPriceGwei    uint32
	ObservationPaymentGjuels  uint32
	TransmissionPaymentGjuels uint32
	AccountingGas             *big.Int
}
type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeacon) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _ArbitrumVRFBeacon.abi.Events["BillingAccessControllerSet"].ID:
		return _ArbitrumVRFBeacon.ParseBillingAccessControllerSet(log)
	case _ArbitrumVRFBeacon.abi.Events["BillingSet"].ID:
		return _ArbitrumVRFBeacon.ParseBillingSet(log)
	case _ArbitrumVRFBeacon.abi.Events["ConfigSet"].ID:
		return _ArbitrumVRFBeacon.ParseConfigSet(log)
	case _ArbitrumVRFBeacon.abi.Events["NewTransmission"].ID:
		return _ArbitrumVRFBeacon.ParseNewTransmission(log)
	case _ArbitrumVRFBeacon.abi.Events["OraclePaid"].ID:
		return _ArbitrumVRFBeacon.ParseOraclePaid(log)
	case _ArbitrumVRFBeacon.abi.Events["OwnershipTransferRequested"].ID:
		return _ArbitrumVRFBeacon.ParseOwnershipTransferRequested(log)
	case _ArbitrumVRFBeacon.abi.Events["OwnershipTransferred"].ID:
		return _ArbitrumVRFBeacon.ParseOwnershipTransferred(log)
	case _ArbitrumVRFBeacon.abi.Events["PayeeshipTransferRequested"].ID:
		return _ArbitrumVRFBeacon.ParsePayeeshipTransferRequested(log)
	case _ArbitrumVRFBeacon.abi.Events["PayeeshipTransferred"].ID:
		return _ArbitrumVRFBeacon.ParsePayeeshipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (ArbitrumVRFBeaconBillingAccessControllerSet) Topic() common.Hash {
	return common.HexToHash("0x793cb73064f3c8cde7e187ae515511e6e56d1ee89bf08b82fa60fb70f8d48912")
}

func (ArbitrumVRFBeaconBillingSet) Topic() common.Hash {
	return common.HexToHash("0x0bf184bf1bba9699114bdceddaf338a1b364252c5e497cc01918dde92031713f")
}

func (ArbitrumVRFBeaconConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (ArbitrumVRFBeaconNewTransmission) Topic() common.Hash {
	return common.HexToHash("0xe0c90b8e55243fcba0f8b68b201983b97f7a3d5aebd6dfa1a4082a07925cc744")
}

func (ArbitrumVRFBeaconOraclePaid) Topic() common.Hash {
	return common.HexToHash("0xd0b1dac935d85bd54cf0a33b0d41d39f8cf53a968465fc7ea2377526b8ac712c")
}

func (ArbitrumVRFBeaconOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (ArbitrumVRFBeaconOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (ArbitrumVRFBeaconPayeeshipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x84f7c7c80bb8ed2279b4aab5f61cd05e6374073d38f46d7f32de8c30e9e38367")
}

func (ArbitrumVRFBeaconPayeeshipTransferred) Topic() common.Hash {
	return common.HexToHash("0x78af32efdcad432315431e9b03d27e6cd98fb79c405fdc5af7c1714d9c0f75b3")
}

func (_ArbitrumVRFBeacon *ArbitrumVRFBeacon) Address() common.Address {
	return _ArbitrumVRFBeacon.address
}

type ArbitrumVRFBeaconInterface interface {
	COORDINATOR(opts *bind.CallOpts) (common.Address, error)

	LINK(opts *bind.CallOpts) (common.Address, error)

	NUMCONFDELAYS(opts *bind.CallOpts) (uint8, error)

	GetBilling(opts *bind.CallOpts) (GetBilling,

		error)

	GetBillingAccessController(opts *bind.CallOpts) (common.Address, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	LinkAvailableForPayment(opts *bind.CallOpts) (*big.Int, error)

	OracleObservationCount(opts *bind.CallOpts, transmitterAddress common.Address) (uint32, error)

	OwedPayment(opts *bind.CallOpts, transmitterAddress common.Address) (*big.Int, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SKeyID(opts *bind.CallOpts) ([32]byte, error)

	SProvingKeyHash(opts *bind.CallOpts) ([32]byte, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AcceptPayeeship(opts *bind.TransactOpts, transmitter common.Address) (*types.Transaction, error)

	ExposeType(opts *bind.TransactOpts, arg0 VRFBeaconReportReport) (*types.Transaction, error)

	KeyGenerated(opts *bind.TransactOpts, kd KeyDataStructKeyData) (*types.Transaction, error)

	NewKeyRequested(opts *bind.TransactOpts) (*types.Transaction, error)

	SetBilling(opts *bind.TransactOpts, maximumGasPriceGwei uint32, reasonableGasPriceGwei uint32, observationPaymentGjuels uint32, transmissionPaymentGjuels uint32, accountingGas *big.Int) (*types.Transaction, error)

	SetBillingAccessController(opts *bind.TransactOpts, _billingAccessController common.Address) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	SetPayees(opts *bind.TransactOpts, transmitters []common.Address, payees []common.Address) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	TransferPayeeship(opts *bind.TransactOpts, transmitter common.Address, proposed common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	WithdrawFunds(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error)

	WithdrawPayment(opts *bind.TransactOpts, transmitter common.Address) (*types.Transaction, error)

	FilterBillingAccessControllerSet(opts *bind.FilterOpts) (*ArbitrumVRFBeaconBillingAccessControllerSetIterator, error)

	WatchBillingAccessControllerSet(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconBillingAccessControllerSet) (event.Subscription, error)

	ParseBillingAccessControllerSet(log types.Log) (*ArbitrumVRFBeaconBillingAccessControllerSet, error)

	FilterBillingSet(opts *bind.FilterOpts) (*ArbitrumVRFBeaconBillingSetIterator, error)

	WatchBillingSet(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconBillingSet) (event.Subscription, error)

	ParseBillingSet(log types.Log) (*ArbitrumVRFBeaconBillingSet, error)

	FilterConfigSet(opts *bind.FilterOpts) (*ArbitrumVRFBeaconConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*ArbitrumVRFBeaconConfigSet, error)

	FilterNewTransmission(opts *bind.FilterOpts, aggregatorRoundId []uint32, epochAndRound []*big.Int) (*ArbitrumVRFBeaconNewTransmissionIterator, error)

	WatchNewTransmission(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconNewTransmission, aggregatorRoundId []uint32, epochAndRound []*big.Int) (event.Subscription, error)

	ParseNewTransmission(log types.Log) (*ArbitrumVRFBeaconNewTransmission, error)

	FilterOraclePaid(opts *bind.FilterOpts, transmitter []common.Address, payee []common.Address, linkToken []common.Address) (*ArbitrumVRFBeaconOraclePaidIterator, error)

	WatchOraclePaid(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconOraclePaid, transmitter []common.Address, payee []common.Address, linkToken []common.Address) (event.Subscription, error)

	ParseOraclePaid(log types.Log) (*ArbitrumVRFBeaconOraclePaid, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ArbitrumVRFBeaconOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*ArbitrumVRFBeaconOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ArbitrumVRFBeaconOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*ArbitrumVRFBeaconOwnershipTransferred, error)

	FilterPayeeshipTransferRequested(opts *bind.FilterOpts, transmitter []common.Address, current []common.Address, proposed []common.Address) (*ArbitrumVRFBeaconPayeeshipTransferRequestedIterator, error)

	WatchPayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconPayeeshipTransferRequested, transmitter []common.Address, current []common.Address, proposed []common.Address) (event.Subscription, error)

	ParsePayeeshipTransferRequested(log types.Log) (*ArbitrumVRFBeaconPayeeshipTransferRequested, error)

	FilterPayeeshipTransferred(opts *bind.FilterOpts, transmitter []common.Address, previous []common.Address, current []common.Address) (*ArbitrumVRFBeaconPayeeshipTransferredIterator, error)

	WatchPayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFBeaconPayeeshipTransferred, transmitter []common.Address, previous []common.Address, current []common.Address) (event.Subscription, error)

	ParsePayeeshipTransferred(log types.Log) (*ArbitrumVRFBeaconPayeeshipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
