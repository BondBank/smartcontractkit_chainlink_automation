// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package arbitrum_vrf_coordinator

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type ECCArithmeticG1Point struct {
	P [2]*big.Int
}

type VRFBeaconTypesCallback struct {
	RequestID    *big.Int
	NumWords     uint16
	Requester    common.Address
	Arguments    []byte
	SubID        uint64
	GasAllowance *big.Int
}

type VRFBeaconTypesCostedCallback struct {
	Callback VRFBeaconTypesCallback
	Price    *big.Int
}

type VRFBeaconTypesOutputServed struct {
	Height            uint64
	ConfirmationDelay *big.Int
}

type VRFBeaconTypesVRFOutput struct {
	BlockHeight       uint64
	ConfirmationDelay *big.Int
	VrfOutput         ECCArithmeticG1Point
	Callbacks         []VRFBeaconTypesCostedCallback
}

var ArbitrumVRFCoordinatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beaconPeriodBlocksArg\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"linkToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BeaconPeriodMustBePositive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earliestAllowed\",\"type\":\"uint256\"}],\"name\":\"BlockTooRecent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"firstDelay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minDelay\",\"type\":\"uint16\"}],\"name\":\"ConfirmationDelayBlocksTooShort\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16[10]\",\"name\":\"confirmationDelays\",\"type\":\"uint16[10]\"},{\"internalType\":\"uint8\",\"name\":\"violatingIndex\",\"type\":\"uint8\"}],\"name\":\"ConfirmationDelaysNotIncreasing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"reportHeight\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"separatorHeight\",\"type\":\"uint64\"}],\"name\":\"HistoryDomainSeparatorTooOld\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldata\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"InvalidConsumer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSubscription\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"MustBeRequestedOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"MustBeSubOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoWordsRequested\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16[10]\",\"name\":\"confDelays\",\"type\":\"uint16[10]\"}],\"name\":\"NonZeroDelayAfterZeroDelay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCallableFromLink\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingRequestExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"requestHeight\",\"type\":\"uint256\"}],\"name\":\"RandomnessNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrant\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ResponseMustBeRetrievedByRequester\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyConsumers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyRequestsReplaceContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySlotsReplaceContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"TooManyWords\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"}],\"name\":\"UniverseHasEndedBangBangBang\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"givenDelay\",\"type\":\"uint24\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay[8]\",\"name\":\"knownDelays\",\"type\":\"uint24[8]\"}],\"name\":\"UnknownConfirmationDelay\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"VRFBeaconTypes.RequestID[]\",\"name\":\"requestIDs\",\"type\":\"uint48[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"successfulFulfillment\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"truncatedErrorData\",\"type\":\"bytes[]\"}],\"name\":\"RandomWordsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nextBeaconOutputHeight\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confDelay\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"gasAllowance\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"structVRFBeaconTypes.Callback\",\"name\":\"callback\",\"type\":\"tuple\"}],\"name\":\"RandomnessFulfillmentRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nextBeaconOutputHeight\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confDelay\",\"type\":\"uint24\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"SubscriptionConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"SubscriptionConsumerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SubscriptionOwnerTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SubscriptionOwnerTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARBSYS\",\"outputs\":[{\"internalType\":\"contractArbSys\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK\",\"outputs\":[{\"internalType\":\"contractLinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CONSUMERS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_CONF_DELAYS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"paymentsInJuels\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"name\":\"forgetConsumerSubscriptionID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfirmationDelays\",\"outputs\":[{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay[8]\",\"name\":\"\",\"type\":\"uint24[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSubId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProducer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLinkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_StartSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_beaconPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDelay\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelay\",\"type\":\"uint24\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"p\",\"type\":\"uint256[2]\"}],\"internalType\":\"structECCArithmetic.G1Point\",\"name\":\"vrfOutput\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"gasAllowance\",\"type\":\"uint96\"}],\"internalType\":\"structVRFBeaconTypes.Callback\",\"name\":\"callback\",\"type\":\"tuple\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"}],\"internalType\":\"structVRFBeaconTypes.CostedCallback[]\",\"name\":\"callbacks\",\"type\":\"tuple[]\"}],\"internalType\":\"structVRFBeaconTypes.VRFOutput[]\",\"name\":\"vrfOutputs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint192\",\"name\":\"juelsPerFeeCoin\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processVRFOutputs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"height\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelay\",\"type\":\"uint24\"}],\"internalType\":\"structVRFBeaconTypes.OutputServed[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"producer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"}],\"name\":\"redeemRandomness\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"randomness\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelayArg\",\"type\":\"uint24\"}],\"name\":\"requestRandomness\",\"outputs\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelayArg\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"}],\"name\":\"requestRandomnessFulfillment\",\"outputs\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay[8]\",\"name\":\"confDelays\",\"type\":\"uint24[8]\"}],\"name\":\"setConfirmationDelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setProducer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"juelsAmount\",\"type\":\"uint256\"}],\"name\":\"transferLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60e06040523480156200001157600080fd5b50604051620044bc380380620044bc833981016040819052620000349162000261565b8033806000816200008c5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000bf57620000bf81620001b6565b5050506001600160a01b03166080526000829003620000f157604051632abc297960e01b815260040160405180910390fd5b60a0829052600980546001600160a01b03191660649081179091556040805163a3b1b31d60e01b815290516000929163a3b1b31d9160048083019260209291908290030181865afa1580156200014b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001719190620002a0565b9050600060a05182620001859190620002ba565b905060008160a051620001999190620002f3565b9050620001a781846200030d565b60c05250620003289350505050565b336001600160a01b03821603620002105760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000083565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b600080604083850312156200027557600080fd5b825160208401519092506001600160a01b03811681146200029557600080fd5b809150509250929050565b600060208284031215620002b357600080fd5b5051919050565b600082620002d857634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b600082821015620003085762000308620002dd565b500390565b60008219821115620003235762000323620002dd565b500190565b60805160a05160c05161411e6200039e60003960006104bf01526000818161049801528181610ff801528181612c8a01528181612cb901528181612cf10152612fc80152600081816102cc015281816109d301528181610d9e01528181611b070152818161204e0152612a24015261411e6000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c80638da5cb5b11610145578063c63c4e9b116100bd578063dc92accf1161008c578063f2fde38b11610071578063f2fde38b14610542578063f645dcb114610555578063f99b1d681461056857600080fd5b8063dc92accf146104f4578063e82ad7d41461051e57600080fd5b8063c63c4e9b1461048b578063cd0593df14610493578063cf7e754a146104ba578063d7ae1d30146104e157600080fd5b8063a21a23e411610114578063a4c0ed36116100f9578063a4c0ed361461045c578063bbcdd0d81461046f578063bf0a12cf1461047857600080fd5b8063a21a23e414610431578063a47c76961461043957600080fd5b80638da5cb5b146103e75780638eef585f146103f85780639e3616f41461040b5780639f87fad71461041e57600080fd5b806337612672116101d857806373433a2f116101a757806379ba50971161018c57806379ba5097146103b757806382359740146103bf57806385c64e11146103d257600080fd5b806373433a2f1461038457806374d846111461039757600080fd5b8063376126721461033b57806345ccbb8b1461034e57806364d51a2a146103565780637341c10c1461037157600080fd5b80631b6b6d23116102145780631b6b6d23146102c75780632b38bafc146103065780632f183cfd146103195780632f7527cc1461032157600080fd5b806304c357cb1461024657806306bfa6371461025b578063098ace261461028c57806312b58349146102ac575b600080fd5b61025961025436600461342c565b61057b565b005b600154600160a01b90046001600160401b03165b6040516001600160401b0390911681526020015b60405180910390f35b61029f61029a3660046134aa565b6106bf565b6040516102839190613534565b6002546001600160601b03165b604051908152602001610283565b6102ee7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610283565b610259610314366004613591565b610911565b6102ee61093b565b610329600881565b60405160ff9091168152602001610283565b6008546102ee906001600160a01b031681565b6102b9610955565b61035e606481565b60405161ffff9091168152602001610283565b61025961037f36600461342c565b610a4b565b6102596103923660046135ac565b610c0a565b6103aa6103a536600461362d565b610efa565b6040516102839190613683565b61025961117a565b6102596103cd366004613696565b61122b565b6103da611399565b60405161028391906136d9565b6000546001600160a01b03166102ee565b6102596104063660046136e8565b6113fe565b610259610419366004613713565b61145c565b61025961042c36600461342c565b6114eb565b61026f611828565b61044c610447366004613696565b6119d5565b6040516102839493929190613754565b61025961046a3660046137cf565b611ad8565b6102b96103e881565b6009546102ee906001600160a01b031681565b61035e600381565b6102b97f000000000000000000000000000000000000000000000000000000000000000081565b6102b97f000000000000000000000000000000000000000000000000000000000000000081565b6102596104ef36600461342c565b611cd2565b61050761050236600461387a565b611d76565b60405165ffffffffffff9091168152602001610283565b61053261052c366004613696565b50600090565b6040519015158152602001610283565b610259610550366004613591565b611eae565b610507610563366004613a00565b611ec2565b610259610576366004613a8a565b611fc2565b6001600160401b03821660009081526005602052604090205482906001600160a01b0316806105bd57604051630fb532db60e11b815260040160405180910390fd5b336001600160a01b038216146105f657604051636c51fda960e11b81526001600160a01b03821660048201526024015b60405180910390fd5b60045460ff161561061a5760405163769dd35360e11b815260040160405180910390fd5b6001600160401b0384166000908152600560205260409020600101546001600160a01b038481169116146106b9576001600160401b03841660008181526005602090815260409182902060010180546001600160a01b0319166001600160a01b0388169081179091558251338152918201527f69436ea6df009049404f564eff6622cd00522b0bd6a89efd9e52a355c4a879be91015b60405180910390a25b50505050565b6008546060906001600160a01b0316331461070f5760405162461bcd60e51b815260206004820152601060248201526f31b0b6361039b2ba283937b23ab1b2b960811b60448201526064016105ed565b600080866001600160401b0381111561072a5761072a6138bd565b60405190808252806020026020018201604052801561076f57816020015b60408051808201909152600080825260208201528152602001906001900390816107485790505b50905060005b8781101561084457600089898381811061079157610791613ab4565b90506020028101906107a39190613aca565b6107ac90613c69565b90506107b981888a612107565b604081015151511515806107d557506040810151516020015115155b1561083157604051806040016040528082600001516001600160401b03168152602001826020015162ffffff1681525083838151811061081757610817613ab4565b6020026020010181905250838061082d90613d54565b9450505b508061083c81613d75565b915050610775565b5060008261ffff166001600160401b03811115610863576108636138bd565b6040519080825280602002602001820160405280156108a857816020015b60408051808201909152600080825260208201528152602001906001900390816108815790505b50905060005b8361ffff16811015610904578281815181106108cc576108cc613ab4565b60200260200101518282815181106108e6576108e6613ab4565b602002602001018190525080806108fc90613d75565b9150506108ae565b5098975050505050505050565b610919612588565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6000610945612588565b506008546001600160a01b031690565b6008546000906001600160a01b031633146109a55760405162461bcd60e51b815260206004820152601060248201526f31b0b6361039b2ba283937b23ab1b2b960811b60448201526064016105ed565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a469190613d8e565b905090565b6001600160401b03821660009081526005602052604090205482906001600160a01b031680610a8d57604051630fb532db60e11b815260040160405180910390fd5b336001600160a01b03821614610ac157604051636c51fda960e11b81526001600160a01b03821660048201526024016105ed565b60045460ff1615610ae55760405163769dd35360e11b815260040160405180910390fd5b6001600160401b03841660009081526005602052604090206002015460631901610b3b576040517f05a48e0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03831660009081526003602090815260408083206001600160401b03808916855292528220541690036106b9576001600160a01b03831660008181526003602090815260408083206001600160401b038916808552908352818420805467ffffffffffffffff19166001908117909155600584528285206002018054918201815585529383902090930180546001600160a01b031916851790555192835290917f43dc749a04ac8fb825cbd514f7c0e13f13bc6f2ee66043b76629d51776cff8e091016106b0565b6008546001600160a01b03163314610c575760405162461bcd60e51b815260206004820152601060248201526f31b0b6361039b2ba283937b23ab1b2b960811b60448201526064016105ed565b8280610ccb5760405162461bcd60e51b815260206004820152602b60248201527f6e756d626572206f6620726563697069656e7473206d7573742062652067726560448201527f61746572207468616e203000000000000000000000000000000000000000000060648201526084016105ed565b601f811115610d1c5760405162461bcd60e51b815260206004820152601360248201527f746f6f206d616e7920726563697069656e74730000000000000000000000000060448201526064016105ed565b808214610d915760405162461bcd60e51b815260206004820152603660248201527f6c656e677468206f6620726563697069656e747320616e64207061796d656e7460448201527f73496e4a75656c7320646964206e6f74206d617463680000000000000000000060648201526084016105ed565b60005b81811015610ef2577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb878784818110610ddd57610ddd613ab4565b9050602002016020810190610df29190613591565b868685818110610e0457610e04613ab4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03909416600485015260200291909101356024830152506044016020604051808303816000875af1158015610e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e949190613da7565b610ee05760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e742066756e6473000000000000000000000000000060448201526064016105ed565b80610eea81613d75565b915050610d94565b505050505050565b65ffffffffffff81166000818152600f602081815260408084208151608081018352815463ffffffff8116825262ffffff6401000000008204168286015261ffff670100000000000000820416938201939093526001600160a01b03690100000000000000000084048116606083810191825298909752949093527fffffff000000000000000000000000000000000000000000000000000000000090911690559151163314610fed5760608101516040517f8e30e8230000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201523360248201526044016105ed565b8051600090611023907f00000000000000000000000000000000000000000000000000000000000000009063ffffffff16613dc9565b90506000600960009054906101000a90046001600160a01b03166001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561107a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109e9190613d8e565b90506000836020015162ffffff16826110b79190613de8565b90508083106110fc576040517f15ad27c300000000000000000000000000000000000000000000000000000000815260048101849052602481018390526044016105ed565b6001600160401b03831115611140576040517f058ddf02000000000000000000000000000000000000000000000000000000008152600481018490526024016105ed565b6000838152600c602090815260408083208288015162ffffff1684529091529020546111709087908690866125e4565b9695505050505050565b6001546001600160a01b031633146111d45760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016105ed565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b60045460ff161561124f5760405163769dd35360e11b815260040160405180910390fd5b6001600160401b0381166000908152600560205260409020546001600160a01b031661128e57604051630fb532db60e11b815260040160405180910390fd5b6001600160401b0381166000908152600560205260409020600101546001600160a01b03163314611314576001600160401b038116600090815260056020526040908190206001015490517fd084e9750000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024016105ed565b6001600160401b0381166000818152600560209081526040918290208054336001600160a01b0319808316821784556001909301805490931690925583516001600160a01b03909116808252928101919091529092917f6f1dc65165ffffedfd8e507b4a0f1fcfdada045ed11f6c26ba27cedfe87802f0910160405180910390a25050565b6113a16132b8565b6040805161010081019182905290600e90600890826000855b82829054906101000a900462ffffff1662ffffff16815260200190600301906020826002010492830192600103820291508084116113ba5790505050505050905090565b6008546001600160a01b0316331461144b5760405162461bcd60e51b815260206004820152601060248201526f31b0b6361039b2ba283937b23ab1b2b960811b60448201526064016105ed565b611458600e8260086132d7565b5050565b611464612588565b60005b818110156114e65760006007600085858581811061148757611487613ab4565b905060200201602081019061149c9190613591565b6001600160a01b031681526020810191909152604001600020805467ffffffffffffffff19166001600160401b0392909216919091179055806114de81613d75565b915050611467565b505050565b6001600160401b03821660009081526005602052604090205482906001600160a01b03168061152d57604051630fb532db60e11b815260040160405180910390fd5b336001600160a01b0382161461156157604051636c51fda960e11b81526001600160a01b03821660048201526024016105ed565b60045460ff16156115855760405163769dd35360e11b815260040160405180910390fd5b6001600160a01b03831660009081526003602090815260408083206001600160401b0380891685529252822054169003611605576040517ff0019fe60000000000000000000000000000000000000000000000000000000081526001600160401b03851660048201526001600160a01b03841660248201526044016105ed565b6001600160401b03841660009081526005602090815260408083206002018054825181850281018501909352808352919290919083018282801561167257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611654575b505050505090506000600182516116899190613de8565b905060005b82518110156117af57856001600160a01b03168382815181106116b3576116b3613ab4565b60200260200101516001600160a01b03160361179d5760008383815181106116dd576116dd613ab4565b6020026020010151905080600560008a6001600160401b03166001600160401b03168152602001908152602001600020600201838154811061172157611721613ab4565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394909416939093179092556001600160401b038a16815260059091526040902060020180548061177557611775613dff565b600082815260209020810160001990810180546001600160a01b0319169055019055506117af565b806117a781613d75565b91505061168e565b506001600160a01b03851660008181526003602090815260408083206001600160401b038b1680855290835292819020805467ffffffffffffffff191690555192835290917f182bff9831466789164ca77075fffd84916d35a8180ba73c27e45634549b445b91015b60405180910390a2505050505050565b60045460009060ff161561184f5760405163769dd35360e11b815260040160405180910390fd5b60018054600160a01b90046001600160401b031690601461186f83613e15565b82546101009290920a6001600160401b03818102199093169183160217909155600154600160a01b90041690506000806040519080825280602002602001820160405280156118c8578160200160208202803683370190505b50604080518082018252600080825260208083018281526001600160401b03888116808552600684528685209551865493516001600160601b039091166001600160a01b0319948516176c01000000000000000000000000919093160291909117909455845160608101865233815280830184815281870188815295855260058452959093208351815483166001600160a01b039182161782559551600182018054909316961695909517905591518051949550909361198e9260028501920190613375565b50506040513381526001600160401b03841691507f464722b4166576d3dcbba877b999bc35cf911f4eaf434b7eba68fa113951d0bf9060200160405180910390a250905090565b6001600160401b038116600090815260056020526040812054819081906060906001600160a01b0316611a1b57604051630fb532db60e11b815260040160405180910390fd5b6001600160401b0380861660009081526006602090815260408083205460058352928190208054600290910180548351818602810186019094528084526001600160601b038616966c01000000000000000000000000909604909516946001600160a01b03909216939092918391830182828015611ac257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611aa4575b5050505050905093509350935093509193509193565b60045460ff1615611afc5760405163769dd35360e11b815260040160405180910390fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611b5e576040517f44b0e3c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208114611b98576040517f8129bbcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611ba682840184613696565b6001600160401b0381166000908152600560205260409020549091506001600160a01b0316611be857604051630fb532db60e11b815260040160405180910390fd5b6001600160401b038116600090815260066020526040812080546001600160601b031691869190611c198385613e31565b92506101000a8154816001600160601b0302191690836001600160601b0316021790555084600260008282829054906101000a90046001600160601b0316611c619190613e31565b92506101000a8154816001600160601b0302191690836001600160601b03160217905550816001600160401b03167fd39ec07f4e209f627a4c427971473820dc129761ba28de8906bd56f57101d4f8828784611cbd9190613e5c565b60408051928352602083019190915201611818565b6001600160401b03821660009081526005602052604090205482906001600160a01b031680611d1457604051630fb532db60e11b815260040160405180910390fd5b336001600160a01b03821614611d4857604051636c51fda960e11b81526001600160a01b03821660048201526024016105ed565b60045460ff1615611d6c5760405163769dd35360e11b815260040160405180910390fd5b6106b984846127e9565b600080600080611d868786612b62565b92509250925065ffffffffffff83166000908152600f602090815260409182902084518154928601518487015160608801516001600160a01b03166901000000000000000000027fffffff0000000000000000000000000000000000000000ffffffffffffffffff61ffff90921667010000000000000002919091167fffffff00000000000000000000000000000000000000000000ffffffffffffff62ffffff9093166401000000000266ffffffffffffff1990961663ffffffff90941693909317949094171617919091179055516001600160401b038216907fc334d6f57be304c8192da2e39220c48e35f7e9afa16c541e68a6a859eff4dbc590611e9990889062ffffff91909116815260200190565b60405180910390a250909150505b9392505050565b611eb6612588565b611ebf81612f0c565b50565b6000806000611ed18787612b62565b925050915060006040518060c001604052808465ffffffffffff1681526020018961ffff168152602001336001600160a01b031681526020018681526020018a6001600160401b031681526020018763ffffffff166001600160601b0316815250905081878a83604051602001611f4b9493929190613ec1565b60408051601f19818403018152828252805160209182012065ffffffffffff87166000908152600a909252919020557fa62e84e206cb87e2f6896795353c5358ff3d415d0bccc24e45c5fad83e17d03c90611fad9084908a908d908690613ec1565b60405180910390a15090979650505050505050565b6008546001600160a01b0316331461200f5760405162461bcd60e51b815260206004820152601060248201526f31b0b6361039b2ba283937b23ab1b2b960811b60448201526064016105ed565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612097573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120bb9190613da7565b6114585760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e742066756e6473000000000000000000000000000060448201526064016105ed565b82516001600160401b03808416911611156121645782516040517f012d824d0000000000000000000000000000000000000000000000000000000081526001600160401b03808516600483015290911660248201526044016105ed565b60408301515151600090158015612182575060408401515160200151155b156121ba575082516001600160401b03166000908152600c602090815260408083208287015162ffffff168452909152902054612214565b83604001516040516020016121cf9190613f64565b60408051601f19818403018152918152815160209283012086516001600160401b03166000908152600c84528281208885015162ffffff168252909352912081905590505b6060840151516000816001600160401b03811115612234576122346138bd565b60405190808252806020026020018201604052801561225d578160200160208202803683370190505b5090506000826001600160401b0381111561227a5761227a6138bd565b6040519080825280601f01601f1916602001820160405280156122a4576020820181803683370190505b5090506000836001600160401b038111156122c1576122c16138bd565b6040519080825280602002602001820160405280156122f457816020015b60608152602001906001900390816122df5790505b5090506000805b858110156124865760008a60600151828151811061231b5761231b613ab4565b6020026020010151905061232f818a612fb5565b61239e576040518060400160405280600b81526020017f756e64657266756e646564000000000000000000000000000000000000000000815250848461ffff168151811061237f5761237f613ab4565b6020026020010181905250828061239590613d54565b93505050612474565b6000806123b58d600001518e602001518c86612fbe565b9150915081156123f45780868661ffff16815181106123d6576123d6613ab4565b602002602001018190525084806123ec90613d54565b95505061243b565b600160f81b87858151811061240b5761240b613ab4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b825151885189908690811061245257612452613ab4565b602002602001019065ffffffffffff16908165ffffffffffff16815250505050505b8061247e81613d75565b9150506122fb565b506060890151511561257d5760008161ffff166001600160401b038111156124b0576124b06138bd565b6040519080825280602002602001820160405280156124e357816020015b60608152602001906001900390816124ce5790505b50905060005b8261ffff1681101561253f5783818151811061250757612507613ab4565b602002602001015182828151811061252157612521613ab4565b6020026020010181905250808061253790613d75565b9150506124e9565b507f47ddf7bb0cbd94c1b43c5097f1352a80db0ceb3696f029d32b24f32cd631d2b785858360405161257393929190613f97565b60405180910390a1505b505050505050505050565b6000546001600160a01b031633146125e25760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016105ed565b565b606082612636576040517fc7d41b1b00000000000000000000000000000000000000000000000000000000815265ffffffffffff861660048201526001600160401b03831660248201526044016105ed565b6040805165ffffffffffff8716602080830191909152865163ffffffff168284015286015162ffffff166060808301919091529186015161ffff166080820152908501516001600160a01b031660a082015260c0810184905260009060e0016040516020818303038152906040528051906020012090506103e8856040015161ffff1611156126ec576040808601519051634a90778560e01b815261ffff90911660048201526103e860248201526044016105ed565b6000856040015161ffff166001600160401b0381111561270e5761270e6138bd565b604051908082528060200260200182016040528015612737578160200160208202803683370190505b50905060005b866040015161ffff168161ffff1610156127de57828160405160200161279292919091825260f01b7fffff00000000000000000000000000000000000000000000000000000000000016602082015260220190565b6040516020818303038152906040528051906020012060001c828261ffff16815181106127c1576127c1613ab4565b6020908102919091010152806127d681613d54565b91505061273d565b509695505050505050565b60045460ff161561280d5760405163769dd35360e11b815260040160405180910390fd5b6001600160401b0382166000908152600560209081526040808320815160608101835281546001600160a01b0390811682526001830154168185015260028201805484518187028101870186528181529295939486019383018282801561289d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161287f575b505050919092525050506001600160401b0380851660009081526006602090815260408083208151808301909252546001600160601b0381168083526c01000000000000000000000000909104909416918101919091529293505b83604001515181101561297957600360008560400151838151811061291f5761291f613ab4565b6020908102919091018101516001600160a01b0316825281810192909252604090810160009081206001600160401b038a1682529092529020805467ffffffffffffffff191690558061297181613d75565b9150506128f8565b506001600160401b038516600090815260056020526040812080546001600160a01b031990811682556001820180549091169055906129bb60028301826133ca565b50506001600160401b038516600090815260066020526040812080546001600160a01b0319169055600280548392906129fe9084906001600160601b031661403d565b92506101000a8154816001600160601b0302191690836001600160601b031602179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb85836001600160601b03166040518363ffffffff1660e01b8152600401612a8d9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015612aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad09190613da7565b612b06576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516001600160a01b03861681526001600160601b03831660208201526001600160401b038716917fe8ed5b475a5b5987aa9165e8731bb78043f39eee32ec5a1169a89e27fcd49815910160405180910390a25050505050565b604080516080810182526000808252602082018190529181018290526060810182905260006103e88561ffff161115612bbc57604051634a90778560e01b815261ffff861660048201526103e860248201526044016105ed565b8461ffff16600003612bfa576040517f08fad2a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600954604080517fa3b1b31d00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163a3b1b31d9160048083019260209291908290030181865afa158015612c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c819190613d8e565b90506000612caf7f00000000000000000000000000000000000000000000000000000000000000008361407b565b9050600081612cde7f000000000000000000000000000000000000000000000000000000000000000085613e5c565b612ce89190613de8565b90506000612d167f00000000000000000000000000000000000000000000000000000000000000008361408f565b905063ffffffff8110612d55576040517f7b2a523000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080518082018252600d805465ffffffffffff1682528251610100810193849052849360009392916020840191600e906008908288855b82829054906101000a900462ffffff1662ffffff1681526020019060030190602082600201049283019260010382029150808411612d8d57905050505091909252505081519192505065ffffffffffff80821610612e17576040517f2b4655b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612e228160016140a3565b600d805465ffffffffffff191665ffffffffffff9290921691909117905560005b6008811015612e89578b62ffffff1683602001518260088110612e6857612e68613ab4565b602002015162ffffff1614612e895780612e8181613d75565b915050612e43565b60088110612eca5760208301516040517fc4f769b00000000000000000000000000000000000000000000000000000000081526105ed918e916004016140c4565b506040805160808101825263ffffffff909416845262ffffff8c16602085015261ffff8d16908401523360608401529850909650919450505050509250925092565b336001600160a01b03821603612f645760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016105ed565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60015b92915050565b6000606081612ff67f00000000000000000000000000000000000000000000000000000000000000006001600160401b03891661408f565b84516080810151604051929350909160009161301a918b918b918690602001613ec1565b60408051601f198184030181529181528151602092830120845165ffffffffffff166000908152600a90935291205490915081146130965760016040518060400160405280601081526020017f756e6b6e6f776e2063616c6c6261636b0000000000000000000000000000000081525094509450505050613263565b6040805160808101825263ffffffff8516815262ffffff8a1660208083019190915284015161ffff1681830152908301516001600160a01b0316606082015282516000906130e690838b8e6125e4565b60608084015186519187015160405193945090926000927f5a47dd71000000000000000000000000000000000000000000000000000000009261312e928791906024016140de565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252600b805466ff000000000000191666010000000000001790558b5160a00151918801519092506000916131cc916001600160601b03909116908461326c565b600b805466ff000000000000191690559050801561321e575050935165ffffffffffff166000908152600a60209081526040808320839055805191820190528181529097509550613263945050505050565b60016040518060400160405280601081526020017f657865637574696f6e206661696c6564000000000000000000000000000000008152509950995050505050505050505b94509492505050565b60005a61138881101561327e57600080fd5b61138881039050846040820482031161329657600080fd5b50823b6132a257600080fd5b60008083516020850160008789f1949350505050565b6040518061010001604052806008906020820280368337509192915050565b6001830191839082156133655791602002820160005b8382111561333457833562ffffff1683826101000a81548162ffffff021916908362ffffff16021790555092602001926003016020816002010492830192600103026132ed565b80156133635782816101000a81549062ffffff0219169055600301602081600201049283019260010302613334565b505b506133719291506133e4565b5090565b828054828255906000526020600020908101928215613365579160200282015b8281111561336557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613395565b5080546000825590600052602060002090810190611ebf91905b5b8082111561337157600081556001016133e5565b80356001600160401b038116811461341057600080fd5b919050565b80356001600160a01b038116811461341057600080fd5b6000806040838503121561343f57600080fd5b613448836133f9565b915061345660208401613415565b90509250929050565b60008083601f84011261347157600080fd5b5081356001600160401b0381111561348857600080fd5b6020830191508360208260051b85010111156134a357600080fd5b9250929050565b6000806000806000608086880312156134c257600080fd5b85356001600160401b038111156134d857600080fd5b6134e48882890161345f565b909650945050602086013577ffffffffffffffffffffffffffffffffffffffffffffffff8116811461351557600080fd5b9250613523604087016133f9565b949793965091946060013592915050565b602080825282518282018190526000919060409081850190868401855b8281101561358457815180516001600160401b0316855286015162ffffff16868501529284019290850190600101613551565b5091979650505050505050565b6000602082840312156135a357600080fd5b611ea782613415565b600080600080604085870312156135c257600080fd5b84356001600160401b03808211156135d957600080fd5b6135e58883890161345f565b909650945060208701359150808211156135fe57600080fd5b5061360b8782880161345f565b95989497509550505050565b803565ffffffffffff8116811461341057600080fd5b60006020828403121561363f57600080fd5b611ea782613617565b600081518084526020808501945080840160005b838110156136785781518752958201959082019060010161365c565b509495945050505050565b602081526000611ea76020830184613648565b6000602082840312156136a857600080fd5b611ea7826133f9565b8060005b60088110156106b957815162ffffff168452602093840193909101906001016136b5565b6101008101612fb882846136b1565b60006101008083850312156136fc57600080fd5b83818401111561370b57600080fd5b509092915050565b6000806020838503121561372657600080fd5b82356001600160401b0381111561373c57600080fd5b6137488582860161345f565b90969095509350505050565b6000608082016001600160601b038716835260206001600160401b038716818501526001600160a01b0380871660408601526080606086015282865180855260a087019150838801945060005b818110156137bf5785518416835294840194918401916001016137a1565b50909a9950505050505050505050565b600080600080606085870312156137e557600080fd5b6137ee85613415565b93506020850135925060408501356001600160401b038082111561381157600080fd5b818701915087601f83011261382557600080fd5b81358181111561383457600080fd5b88602082850101111561384657600080fd5b95989497505060200194505050565b803561ffff8116811461341057600080fd5b803562ffffff8116811461341057600080fd5b60008060006060848603121561388f57600080fd5b61389884613855565b92506138a6602085016133f9565b91506138b460408501613867565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156138f5576138f56138bd565b60405290565b60405160c081016001600160401b03811182821017156138f5576138f56138bd565b604051608081016001600160401b03811182821017156138f5576138f56138bd565b604051602081016001600160401b03811182821017156138f5576138f56138bd565b604051601f8201601f191681016001600160401b0381118282101715613989576139896138bd565b604052919050565b600082601f8301126139a257600080fd5b81356001600160401b038111156139bb576139bb6138bd565b6139ce601f8201601f1916602001613961565b8181528460208386010111156139e357600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215613a1857600080fd5b613a21866133f9565b9450613a2f60208701613855565b9350613a3d60408701613867565b9250606086013563ffffffff81168114613a5657600080fd5b915060808601356001600160401b03811115613a7157600080fd5b613a7d88828901613991565b9150509295509295909350565b60008060408385031215613a9d57600080fd5b613aa683613415565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b60008235609e19833603018112613ae057600080fd5b9190910192915050565b80356001600160601b038116811461341057600080fd5b600082601f830112613b1257600080fd5b813560206001600160401b0380831115613b2e57613b2e6138bd565b8260051b613b3d838201613961565b9384528581018301938381019088861115613b5757600080fd5b84880192505b85831015613c5d57823584811115613b7457600080fd5b8801601f196040828c0382011215613b8b57600080fd5b613b936138d3565b8783013587811115613ba457600080fd5b830160c0818e0384011215613bb857600080fd5b613bc06138fb565b9250613bcd898201613617565b8352613bdb60408201613855565b89840152613beb60608201613415565b6040840152608081013588811115613c0257600080fd5b613c108e8b83850101613991565b606085015250613c2260a082016133f9565b6080840152613c3360c08201613aea565b60a084015250818152613c4860408401613aea565b81890152845250509184019190840190613b5d565b98975050505050505050565b600081360360a0811215613c7c57600080fd5b613c8461391d565b613c8d846133f9565b81526020613c9c818601613867565b828201526040603f1984011215613cb257600080fd5b613cba61393f565b925036605f860112613ccb57600080fd5b613cd36138d3565b806080870136811115613ce557600080fd5b604088015b81811015613d015780358452928401928401613cea565b50908552604084019490945250509035906001600160401b03821115613d2657600080fd5b613d3236838601613b01565b60608201529392505050565b634e487b7160e01b600052601160045260246000fd5b600061ffff808316818103613d6b57613d6b613d3e565b6001019392505050565b600060018201613d8757613d87613d3e565b5060010190565b600060208284031215613da057600080fd5b5051919050565b600060208284031215613db957600080fd5b81518015158114611ea757600080fd5b6000816000190483118215151615613de357613de3613d3e565b500290565b600082821015613dfa57613dfa613d3e565b500390565b634e487b7160e01b600052603160045260246000fd5b60006001600160401b03808316818103613d6b57613d6b613d3e565b60006001600160601b03808316818516808303821115613e5357613e53613d3e565b01949350505050565b60008219821115613e6f57613e6f613d3e565b500190565b6000815180845260005b81811015613e9a57602081850181015186830182015201613e7e565b81811115613eac576000602083870101525b50601f01601f19169290920160200192915050565b60006001600160401b03808716835262ffffff8616602084015280851660408401526080606084015265ffffffffffff845116608084015261ffff60208501511660a08401526001600160a01b0360408501511660c0840152606084015160c060e0850152613f34610140850182613e74565b60808601519092166101008501525060a0909301516001600160601b031661012090920191909152509392505050565b815160408201908260005b6002811015613f8e578251825260209283019290910190600101613f6f565b50505092915050565b606080825284519082018190526000906020906080840190828801845b82811015613fd857815165ffffffffffff1684529284019290840190600101613fb4565b50505083810382850152613fec8187613e74565b905083810360408501528085518083528383019150838160051b84010184880160005b838110156137bf57601f1986840301855261402b838351613e74565b9487019492509086019060010161400f565b60006001600160601b038381169083168181101561405d5761405d613d3e565b039392505050565b634e487b7160e01b600052601260045260246000fd5b60008261408a5761408a614065565b500690565b60008261409e5761409e614065565b500490565b600065ffffffffffff808316818516808303821115613e5357613e53613d3e565b62ffffff831681526101208101611ea760208301846136b1565b65ffffffffffff841681526060602082015260006140ff6060830185613648565b82810360408401526111708185613e7456fea164736f6c634300080f000a",
}

var ArbitrumVRFCoordinatorABI = ArbitrumVRFCoordinatorMetaData.ABI

var ArbitrumVRFCoordinatorBin = ArbitrumVRFCoordinatorMetaData.Bin

func DeployArbitrumVRFCoordinator(auth *bind.TransactOpts, backend bind.ContractBackend, beaconPeriodBlocksArg *big.Int, linkToken common.Address) (common.Address, *types.Transaction, *ArbitrumVRFCoordinator, error) {
	parsed, err := ArbitrumVRFCoordinatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ArbitrumVRFCoordinatorBin), backend, beaconPeriodBlocksArg, linkToken)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ArbitrumVRFCoordinator{ArbitrumVRFCoordinatorCaller: ArbitrumVRFCoordinatorCaller{contract: contract}, ArbitrumVRFCoordinatorTransactor: ArbitrumVRFCoordinatorTransactor{contract: contract}, ArbitrumVRFCoordinatorFilterer: ArbitrumVRFCoordinatorFilterer{contract: contract}}, nil
}

type ArbitrumVRFCoordinator struct {
	address common.Address
	abi     abi.ABI
	ArbitrumVRFCoordinatorCaller
	ArbitrumVRFCoordinatorTransactor
	ArbitrumVRFCoordinatorFilterer
}

type ArbitrumVRFCoordinatorCaller struct {
	contract *bind.BoundContract
}

type ArbitrumVRFCoordinatorTransactor struct {
	contract *bind.BoundContract
}

type ArbitrumVRFCoordinatorFilterer struct {
	contract *bind.BoundContract
}

type ArbitrumVRFCoordinatorSession struct {
	Contract     *ArbitrumVRFCoordinator
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type ArbitrumVRFCoordinatorCallerSession struct {
	Contract *ArbitrumVRFCoordinatorCaller
	CallOpts bind.CallOpts
}

type ArbitrumVRFCoordinatorTransactorSession struct {
	Contract     *ArbitrumVRFCoordinatorTransactor
	TransactOpts bind.TransactOpts
}

type ArbitrumVRFCoordinatorRaw struct {
	Contract *ArbitrumVRFCoordinator
}

type ArbitrumVRFCoordinatorCallerRaw struct {
	Contract *ArbitrumVRFCoordinatorCaller
}

type ArbitrumVRFCoordinatorTransactorRaw struct {
	Contract *ArbitrumVRFCoordinatorTransactor
}

func NewArbitrumVRFCoordinator(address common.Address, backend bind.ContractBackend) (*ArbitrumVRFCoordinator, error) {
	abi, err := abi.JSON(strings.NewReader(ArbitrumVRFCoordinatorABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindArbitrumVRFCoordinator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFCoordinator{address: address, abi: abi, ArbitrumVRFCoordinatorCaller: ArbitrumVRFCoordinatorCaller{contract: contract}, ArbitrumVRFCoordinatorTransactor: ArbitrumVRFCoordinatorTransactor{contract: contract}, ArbitrumVRFCoordinatorFilterer: ArbitrumVRFCoordinatorFilterer{contract: contract}}, nil
}

func NewArbitrumVRFCoordinatorCaller(address common.Address, caller bind.ContractCaller) (*ArbitrumVRFCoordinatorCaller, error) {
	contract, err := bindArbitrumVRFCoordinator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFCoordinatorCaller{contract: contract}, nil
}

func NewArbitrumVRFCoordinatorTransactor(address common.Address, transactor bind.ContractTransactor) (*ArbitrumVRFCoordinatorTransactor, error) {
	contract, err := bindArbitrumVRFCoordinator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFCoordinatorTransactor{contract: contract}, nil
}

func NewArbitrumVRFCoordinatorFilterer(address common.Address, filterer bind.ContractFilterer) (*ArbitrumVRFCoordinatorFilterer, error) {
	contract, err := bindArbitrumVRFCoordinator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFCoordinatorFilterer{contract: contract}, nil
}

func bindArbitrumVRFCoordinator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ArbitrumVRFCoordinatorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbitrumVRFCoordinator.Contract.ArbitrumVRFCoordinatorCaller.contract.Call(opts, result, method, params...)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.ArbitrumVRFCoordinatorTransactor.contract.Transfer(opts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.ArbitrumVRFCoordinatorTransactor.contract.Transact(opts, method, params...)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ArbitrumVRFCoordinator.Contract.contract.Call(opts, result, method, params...)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.contract.Transfer(opts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.contract.Transact(opts, method, params...)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCaller) ARBSYS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbitrumVRFCoordinator.contract.Call(opts, &out, "ARBSYS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) ARBSYS() (common.Address, error) {
	return _ArbitrumVRFCoordinator.Contract.ARBSYS(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerSession) ARBSYS() (common.Address, error) {
	return _ArbitrumVRFCoordinator.Contract.ARBSYS(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCaller) LINK(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbitrumVRFCoordinator.contract.Call(opts, &out, "LINK")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) LINK() (common.Address, error) {
	return _ArbitrumVRFCoordinator.Contract.LINK(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerSession) LINK() (common.Address, error) {
	return _ArbitrumVRFCoordinator.Contract.LINK(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCaller) MAXCONSUMERS(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ArbitrumVRFCoordinator.contract.Call(opts, &out, "MAX_CONSUMERS")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) MAXCONSUMERS() (uint16, error) {
	return _ArbitrumVRFCoordinator.Contract.MAXCONSUMERS(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerSession) MAXCONSUMERS() (uint16, error) {
	return _ArbitrumVRFCoordinator.Contract.MAXCONSUMERS(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCaller) NUMCONFDELAYS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ArbitrumVRFCoordinator.contract.Call(opts, &out, "NUM_CONF_DELAYS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) NUMCONFDELAYS() (uint8, error) {
	return _ArbitrumVRFCoordinator.Contract.NUMCONFDELAYS(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerSession) NUMCONFDELAYS() (uint8, error) {
	return _ArbitrumVRFCoordinator.Contract.NUMCONFDELAYS(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCaller) GetConfirmationDelays(opts *bind.CallOpts) ([8]*big.Int, error) {
	var out []interface{}
	err := _ArbitrumVRFCoordinator.contract.Call(opts, &out, "getConfirmationDelays")

	if err != nil {
		return *new([8]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([8]*big.Int)).(*[8]*big.Int)

	return out0, err

}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) GetConfirmationDelays() ([8]*big.Int, error) {
	return _ArbitrumVRFCoordinator.Contract.GetConfirmationDelays(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerSession) GetConfirmationDelays() ([8]*big.Int, error) {
	return _ArbitrumVRFCoordinator.Contract.GetConfirmationDelays(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCaller) GetCurrentSubId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ArbitrumVRFCoordinator.contract.Call(opts, &out, "getCurrentSubId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) GetCurrentSubId() (uint64, error) {
	return _ArbitrumVRFCoordinator.Contract.GetCurrentSubId(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerSession) GetCurrentSubId() (uint64, error) {
	return _ArbitrumVRFCoordinator.Contract.GetCurrentSubId(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCaller) GetProducer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbitrumVRFCoordinator.contract.Call(opts, &out, "getProducer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) GetProducer() (common.Address, error) {
	return _ArbitrumVRFCoordinator.Contract.GetProducer(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerSession) GetProducer() (common.Address, error) {
	return _ArbitrumVRFCoordinator.Contract.GetProducer(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCaller) GetSubscription(opts *bind.CallOpts, subId uint64) (GetSubscription,

	error) {
	var out []interface{}
	err := _ArbitrumVRFCoordinator.contract.Call(opts, &out, "getSubscription", subId)

	outstruct := new(GetSubscription)
	if err != nil {
		return *outstruct, err
	}

	outstruct.Balance = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.ReqCount = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.Owner = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Consumers = *abi.ConvertType(out[3], new([]common.Address)).(*[]common.Address)

	return *outstruct, err

}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) GetSubscription(subId uint64) (GetSubscription,

	error) {
	return _ArbitrumVRFCoordinator.Contract.GetSubscription(&_ArbitrumVRFCoordinator.CallOpts, subId)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerSession) GetSubscription(subId uint64) (GetSubscription,

	error) {
	return _ArbitrumVRFCoordinator.Contract.GetSubscription(&_ArbitrumVRFCoordinator.CallOpts, subId)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCaller) GetTotalBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumVRFCoordinator.contract.Call(opts, &out, "getTotalBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) GetTotalBalance() (*big.Int, error) {
	return _ArbitrumVRFCoordinator.Contract.GetTotalBalance(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerSession) GetTotalBalance() (*big.Int, error) {
	return _ArbitrumVRFCoordinator.Contract.GetTotalBalance(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCaller) GetTotalLinkBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumVRFCoordinator.contract.Call(opts, &out, "getTotalLinkBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) GetTotalLinkBalance() (*big.Int, error) {
	return _ArbitrumVRFCoordinator.Contract.GetTotalLinkBalance(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerSession) GetTotalLinkBalance() (*big.Int, error) {
	return _ArbitrumVRFCoordinator.Contract.GetTotalLinkBalance(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCaller) IStartSlot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumVRFCoordinator.contract.Call(opts, &out, "i_StartSlot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) IStartSlot() (*big.Int, error) {
	return _ArbitrumVRFCoordinator.Contract.IStartSlot(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerSession) IStartSlot() (*big.Int, error) {
	return _ArbitrumVRFCoordinator.Contract.IStartSlot(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCaller) IBeaconPeriodBlocks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumVRFCoordinator.contract.Call(opts, &out, "i_beaconPeriodBlocks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) IBeaconPeriodBlocks() (*big.Int, error) {
	return _ArbitrumVRFCoordinator.Contract.IBeaconPeriodBlocks(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerSession) IBeaconPeriodBlocks() (*big.Int, error) {
	return _ArbitrumVRFCoordinator.Contract.IBeaconPeriodBlocks(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCaller) MaxNumWords(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ArbitrumVRFCoordinator.contract.Call(opts, &out, "maxNumWords")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) MaxNumWords() (*big.Int, error) {
	return _ArbitrumVRFCoordinator.Contract.MaxNumWords(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerSession) MaxNumWords() (*big.Int, error) {
	return _ArbitrumVRFCoordinator.Contract.MaxNumWords(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCaller) MinDelay(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ArbitrumVRFCoordinator.contract.Call(opts, &out, "minDelay")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) MinDelay() (uint16, error) {
	return _ArbitrumVRFCoordinator.Contract.MinDelay(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerSession) MinDelay() (uint16, error) {
	return _ArbitrumVRFCoordinator.Contract.MinDelay(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbitrumVRFCoordinator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) Owner() (common.Address, error) {
	return _ArbitrumVRFCoordinator.Contract.Owner(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerSession) Owner() (common.Address, error) {
	return _ArbitrumVRFCoordinator.Contract.Owner(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCaller) PendingRequestExists(opts *bind.CallOpts, subId uint64) (bool, error) {
	var out []interface{}
	err := _ArbitrumVRFCoordinator.contract.Call(opts, &out, "pendingRequestExists", subId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) PendingRequestExists(subId uint64) (bool, error) {
	return _ArbitrumVRFCoordinator.Contract.PendingRequestExists(&_ArbitrumVRFCoordinator.CallOpts, subId)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerSession) PendingRequestExists(subId uint64) (bool, error) {
	return _ArbitrumVRFCoordinator.Contract.PendingRequestExists(&_ArbitrumVRFCoordinator.CallOpts, subId)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCaller) Producer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ArbitrumVRFCoordinator.contract.Call(opts, &out, "producer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) Producer() (common.Address, error) {
	return _ArbitrumVRFCoordinator.Contract.Producer(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorCallerSession) Producer() (common.Address, error) {
	return _ArbitrumVRFCoordinator.Contract.Producer(&_ArbitrumVRFCoordinator.CallOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "acceptOwnership")
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) AcceptOwnership() (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.AcceptOwnership(&_ArbitrumVRFCoordinator.TransactOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.AcceptOwnership(&_ArbitrumVRFCoordinator.TransactOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) AcceptSubscriptionOwnerTransfer(opts *bind.TransactOpts, subId uint64) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "acceptSubscriptionOwnerTransfer", subId)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) AcceptSubscriptionOwnerTransfer(subId uint64) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.AcceptSubscriptionOwnerTransfer(&_ArbitrumVRFCoordinator.TransactOpts, subId)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) AcceptSubscriptionOwnerTransfer(subId uint64) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.AcceptSubscriptionOwnerTransfer(&_ArbitrumVRFCoordinator.TransactOpts, subId)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) AddConsumer(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "addConsumer", subId, consumer)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) AddConsumer(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.AddConsumer(&_ArbitrumVRFCoordinator.TransactOpts, subId, consumer)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) AddConsumer(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.AddConsumer(&_ArbitrumVRFCoordinator.TransactOpts, subId, consumer)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) BatchTransferLink(opts *bind.TransactOpts, recipients []common.Address, paymentsInJuels []*big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "batchTransferLink", recipients, paymentsInJuels)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) BatchTransferLink(recipients []common.Address, paymentsInJuels []*big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.BatchTransferLink(&_ArbitrumVRFCoordinator.TransactOpts, recipients, paymentsInJuels)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) BatchTransferLink(recipients []common.Address, paymentsInJuels []*big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.BatchTransferLink(&_ArbitrumVRFCoordinator.TransactOpts, recipients, paymentsInJuels)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) CancelSubscription(opts *bind.TransactOpts, subId uint64, to common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "cancelSubscription", subId, to)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) CancelSubscription(subId uint64, to common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.CancelSubscription(&_ArbitrumVRFCoordinator.TransactOpts, subId, to)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) CancelSubscription(subId uint64, to common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.CancelSubscription(&_ArbitrumVRFCoordinator.TransactOpts, subId, to)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) CreateSubscription(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "createSubscription")
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) CreateSubscription() (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.CreateSubscription(&_ArbitrumVRFCoordinator.TransactOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) CreateSubscription() (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.CreateSubscription(&_ArbitrumVRFCoordinator.TransactOpts)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) ForgetConsumerSubscriptionID(opts *bind.TransactOpts, consumers []common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "forgetConsumerSubscriptionID", consumers)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) ForgetConsumerSubscriptionID(consumers []common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.ForgetConsumerSubscriptionID(&_ArbitrumVRFCoordinator.TransactOpts, consumers)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) ForgetConsumerSubscriptionID(consumers []common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.ForgetConsumerSubscriptionID(&_ArbitrumVRFCoordinator.TransactOpts, consumers)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) OnTokenTransfer(opts *bind.TransactOpts, arg0 common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "onTokenTransfer", arg0, amount, data)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) OnTokenTransfer(arg0 common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.OnTokenTransfer(&_ArbitrumVRFCoordinator.TransactOpts, arg0, amount, data)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) OnTokenTransfer(arg0 common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.OnTokenTransfer(&_ArbitrumVRFCoordinator.TransactOpts, arg0, amount, data)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) ProcessVRFOutputs(opts *bind.TransactOpts, vrfOutputs []VRFBeaconTypesVRFOutput, juelsPerFeeCoin *big.Int, blockHeight uint64, arg3 [32]byte) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "processVRFOutputs", vrfOutputs, juelsPerFeeCoin, blockHeight, arg3)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) ProcessVRFOutputs(vrfOutputs []VRFBeaconTypesVRFOutput, juelsPerFeeCoin *big.Int, blockHeight uint64, arg3 [32]byte) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.ProcessVRFOutputs(&_ArbitrumVRFCoordinator.TransactOpts, vrfOutputs, juelsPerFeeCoin, blockHeight, arg3)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) ProcessVRFOutputs(vrfOutputs []VRFBeaconTypesVRFOutput, juelsPerFeeCoin *big.Int, blockHeight uint64, arg3 [32]byte) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.ProcessVRFOutputs(&_ArbitrumVRFCoordinator.TransactOpts, vrfOutputs, juelsPerFeeCoin, blockHeight, arg3)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) RedeemRandomness(opts *bind.TransactOpts, requestID *big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "redeemRandomness", requestID)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) RedeemRandomness(requestID *big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.RedeemRandomness(&_ArbitrumVRFCoordinator.TransactOpts, requestID)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) RedeemRandomness(requestID *big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.RedeemRandomness(&_ArbitrumVRFCoordinator.TransactOpts, requestID)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) RemoveConsumer(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "removeConsumer", subId, consumer)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) RemoveConsumer(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.RemoveConsumer(&_ArbitrumVRFCoordinator.TransactOpts, subId, consumer)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) RemoveConsumer(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.RemoveConsumer(&_ArbitrumVRFCoordinator.TransactOpts, subId, consumer)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) RequestRandomness(opts *bind.TransactOpts, numWords uint16, subID uint64, confirmationDelayArg *big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "requestRandomness", numWords, subID, confirmationDelayArg)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) RequestRandomness(numWords uint16, subID uint64, confirmationDelayArg *big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.RequestRandomness(&_ArbitrumVRFCoordinator.TransactOpts, numWords, subID, confirmationDelayArg)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) RequestRandomness(numWords uint16, subID uint64, confirmationDelayArg *big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.RequestRandomness(&_ArbitrumVRFCoordinator.TransactOpts, numWords, subID, confirmationDelayArg)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) RequestRandomnessFulfillment(opts *bind.TransactOpts, subID uint64, numWords uint16, confirmationDelayArg *big.Int, callbackGasLimit uint32, arguments []byte) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "requestRandomnessFulfillment", subID, numWords, confirmationDelayArg, callbackGasLimit, arguments)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) RequestRandomnessFulfillment(subID uint64, numWords uint16, confirmationDelayArg *big.Int, callbackGasLimit uint32, arguments []byte) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.RequestRandomnessFulfillment(&_ArbitrumVRFCoordinator.TransactOpts, subID, numWords, confirmationDelayArg, callbackGasLimit, arguments)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) RequestRandomnessFulfillment(subID uint64, numWords uint16, confirmationDelayArg *big.Int, callbackGasLimit uint32, arguments []byte) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.RequestRandomnessFulfillment(&_ArbitrumVRFCoordinator.TransactOpts, subID, numWords, confirmationDelayArg, callbackGasLimit, arguments)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) RequestSubscriptionOwnerTransfer(opts *bind.TransactOpts, subId uint64, newOwner common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "requestSubscriptionOwnerTransfer", subId, newOwner)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) RequestSubscriptionOwnerTransfer(subId uint64, newOwner common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.RequestSubscriptionOwnerTransfer(&_ArbitrumVRFCoordinator.TransactOpts, subId, newOwner)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) RequestSubscriptionOwnerTransfer(subId uint64, newOwner common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.RequestSubscriptionOwnerTransfer(&_ArbitrumVRFCoordinator.TransactOpts, subId, newOwner)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) SetConfirmationDelays(opts *bind.TransactOpts, confDelays [8]*big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "setConfirmationDelays", confDelays)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) SetConfirmationDelays(confDelays [8]*big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.SetConfirmationDelays(&_ArbitrumVRFCoordinator.TransactOpts, confDelays)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) SetConfirmationDelays(confDelays [8]*big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.SetConfirmationDelays(&_ArbitrumVRFCoordinator.TransactOpts, confDelays)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) SetProducer(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "setProducer", addr)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) SetProducer(addr common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.SetProducer(&_ArbitrumVRFCoordinator.TransactOpts, addr)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) SetProducer(addr common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.SetProducer(&_ArbitrumVRFCoordinator.TransactOpts, addr)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) TransferLink(opts *bind.TransactOpts, recipient common.Address, juelsAmount *big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "transferLink", recipient, juelsAmount)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) TransferLink(recipient common.Address, juelsAmount *big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.TransferLink(&_ArbitrumVRFCoordinator.TransactOpts, recipient, juelsAmount)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) TransferLink(recipient common.Address, juelsAmount *big.Int) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.TransferLink(&_ArbitrumVRFCoordinator.TransactOpts, recipient, juelsAmount)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.contract.Transact(opts, "transferOwnership", to)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.TransferOwnership(&_ArbitrumVRFCoordinator.TransactOpts, to)
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _ArbitrumVRFCoordinator.Contract.TransferOwnership(&_ArbitrumVRFCoordinator.TransactOpts, to)
}

type ArbitrumVRFCoordinatorOwnershipTransferRequestedIterator struct {
	Event *ArbitrumVRFCoordinatorOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFCoordinatorOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFCoordinatorOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFCoordinatorOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFCoordinatorOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFCoordinatorOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFCoordinatorOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ArbitrumVRFCoordinatorOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFCoordinatorOwnershipTransferRequestedIterator{contract: _ArbitrumVRFCoordinator.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFCoordinatorOwnershipTransferRequested)
				if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) ParseOwnershipTransferRequested(log types.Log) (*ArbitrumVRFCoordinatorOwnershipTransferRequested, error) {
	event := new(ArbitrumVRFCoordinatorOwnershipTransferRequested)
	if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFCoordinatorOwnershipTransferredIterator struct {
	Event *ArbitrumVRFCoordinatorOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFCoordinatorOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFCoordinatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFCoordinatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFCoordinatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFCoordinatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFCoordinatorOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ArbitrumVRFCoordinatorOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFCoordinatorOwnershipTransferredIterator{contract: _ArbitrumVRFCoordinator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFCoordinatorOwnershipTransferred)
				if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) ParseOwnershipTransferred(log types.Log) (*ArbitrumVRFCoordinatorOwnershipTransferred, error) {
	event := new(ArbitrumVRFCoordinatorOwnershipTransferred)
	if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFCoordinatorRandomWordsFulfilledIterator struct {
	Event *ArbitrumVRFCoordinatorRandomWordsFulfilled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFCoordinatorRandomWordsFulfilledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFCoordinatorRandomWordsFulfilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFCoordinatorRandomWordsFulfilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFCoordinatorRandomWordsFulfilledIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFCoordinatorRandomWordsFulfilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFCoordinatorRandomWordsFulfilled struct {
	RequestIDs            []*big.Int
	SuccessfulFulfillment []byte
	TruncatedErrorData    [][]byte
	Raw                   types.Log
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) FilterRandomWordsFulfilled(opts *bind.FilterOpts) (*ArbitrumVRFCoordinatorRandomWordsFulfilledIterator, error) {

	logs, sub, err := _ArbitrumVRFCoordinator.contract.FilterLogs(opts, "RandomWordsFulfilled")
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFCoordinatorRandomWordsFulfilledIterator{contract: _ArbitrumVRFCoordinator.contract, event: "RandomWordsFulfilled", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) WatchRandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorRandomWordsFulfilled) (event.Subscription, error) {

	logs, sub, err := _ArbitrumVRFCoordinator.contract.WatchLogs(opts, "RandomWordsFulfilled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFCoordinatorRandomWordsFulfilled)
				if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "RandomWordsFulfilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) ParseRandomWordsFulfilled(log types.Log) (*ArbitrumVRFCoordinatorRandomWordsFulfilled, error) {
	event := new(ArbitrumVRFCoordinatorRandomWordsFulfilled)
	if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "RandomWordsFulfilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFCoordinatorRandomnessFulfillmentRequestedIterator struct {
	Event *ArbitrumVRFCoordinatorRandomnessFulfillmentRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFCoordinatorRandomnessFulfillmentRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFCoordinatorRandomnessFulfillmentRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFCoordinatorRandomnessFulfillmentRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFCoordinatorRandomnessFulfillmentRequestedIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFCoordinatorRandomnessFulfillmentRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFCoordinatorRandomnessFulfillmentRequested struct {
	NextBeaconOutputHeight uint64
	ConfDelay              *big.Int
	SubID                  uint64
	Callback               VRFBeaconTypesCallback
	Raw                    types.Log
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) FilterRandomnessFulfillmentRequested(opts *bind.FilterOpts) (*ArbitrumVRFCoordinatorRandomnessFulfillmentRequestedIterator, error) {

	logs, sub, err := _ArbitrumVRFCoordinator.contract.FilterLogs(opts, "RandomnessFulfillmentRequested")
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFCoordinatorRandomnessFulfillmentRequestedIterator{contract: _ArbitrumVRFCoordinator.contract, event: "RandomnessFulfillmentRequested", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) WatchRandomnessFulfillmentRequested(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorRandomnessFulfillmentRequested) (event.Subscription, error) {

	logs, sub, err := _ArbitrumVRFCoordinator.contract.WatchLogs(opts, "RandomnessFulfillmentRequested")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFCoordinatorRandomnessFulfillmentRequested)
				if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "RandomnessFulfillmentRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) ParseRandomnessFulfillmentRequested(log types.Log) (*ArbitrumVRFCoordinatorRandomnessFulfillmentRequested, error) {
	event := new(ArbitrumVRFCoordinatorRandomnessFulfillmentRequested)
	if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "RandomnessFulfillmentRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFCoordinatorRandomnessRequestedIterator struct {
	Event *ArbitrumVRFCoordinatorRandomnessRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFCoordinatorRandomnessRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFCoordinatorRandomnessRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFCoordinatorRandomnessRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFCoordinatorRandomnessRequestedIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFCoordinatorRandomnessRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFCoordinatorRandomnessRequested struct {
	NextBeaconOutputHeight uint64
	ConfDelay              *big.Int
	Raw                    types.Log
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) FilterRandomnessRequested(opts *bind.FilterOpts, nextBeaconOutputHeight []uint64) (*ArbitrumVRFCoordinatorRandomnessRequestedIterator, error) {

	var nextBeaconOutputHeightRule []interface{}
	for _, nextBeaconOutputHeightItem := range nextBeaconOutputHeight {
		nextBeaconOutputHeightRule = append(nextBeaconOutputHeightRule, nextBeaconOutputHeightItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.FilterLogs(opts, "RandomnessRequested", nextBeaconOutputHeightRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFCoordinatorRandomnessRequestedIterator{contract: _ArbitrumVRFCoordinator.contract, event: "RandomnessRequested", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) WatchRandomnessRequested(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorRandomnessRequested, nextBeaconOutputHeight []uint64) (event.Subscription, error) {

	var nextBeaconOutputHeightRule []interface{}
	for _, nextBeaconOutputHeightItem := range nextBeaconOutputHeight {
		nextBeaconOutputHeightRule = append(nextBeaconOutputHeightRule, nextBeaconOutputHeightItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.WatchLogs(opts, "RandomnessRequested", nextBeaconOutputHeightRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFCoordinatorRandomnessRequested)
				if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "RandomnessRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) ParseRandomnessRequested(log types.Log) (*ArbitrumVRFCoordinatorRandomnessRequested, error) {
	event := new(ArbitrumVRFCoordinatorRandomnessRequested)
	if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "RandomnessRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFCoordinatorSubscriptionCanceledIterator struct {
	Event *ArbitrumVRFCoordinatorSubscriptionCanceled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFCoordinatorSubscriptionCanceledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFCoordinatorSubscriptionCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFCoordinatorSubscriptionCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFCoordinatorSubscriptionCanceledIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFCoordinatorSubscriptionCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFCoordinatorSubscriptionCanceled struct {
	SubId  uint64
	To     common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) FilterSubscriptionCanceled(opts *bind.FilterOpts, subId []uint64) (*ArbitrumVRFCoordinatorSubscriptionCanceledIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.FilterLogs(opts, "SubscriptionCanceled", subIdRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFCoordinatorSubscriptionCanceledIterator{contract: _ArbitrumVRFCoordinator.contract, event: "SubscriptionCanceled", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) WatchSubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorSubscriptionCanceled, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.WatchLogs(opts, "SubscriptionCanceled", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFCoordinatorSubscriptionCanceled)
				if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "SubscriptionCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) ParseSubscriptionCanceled(log types.Log) (*ArbitrumVRFCoordinatorSubscriptionCanceled, error) {
	event := new(ArbitrumVRFCoordinatorSubscriptionCanceled)
	if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "SubscriptionCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFCoordinatorSubscriptionConsumerAddedIterator struct {
	Event *ArbitrumVRFCoordinatorSubscriptionConsumerAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFCoordinatorSubscriptionConsumerAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFCoordinatorSubscriptionConsumerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFCoordinatorSubscriptionConsumerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFCoordinatorSubscriptionConsumerAddedIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFCoordinatorSubscriptionConsumerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFCoordinatorSubscriptionConsumerAdded struct {
	SubId    uint64
	Consumer common.Address
	Raw      types.Log
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) FilterSubscriptionConsumerAdded(opts *bind.FilterOpts, subId []uint64) (*ArbitrumVRFCoordinatorSubscriptionConsumerAddedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.FilterLogs(opts, "SubscriptionConsumerAdded", subIdRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFCoordinatorSubscriptionConsumerAddedIterator{contract: _ArbitrumVRFCoordinator.contract, event: "SubscriptionConsumerAdded", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) WatchSubscriptionConsumerAdded(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorSubscriptionConsumerAdded, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.WatchLogs(opts, "SubscriptionConsumerAdded", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFCoordinatorSubscriptionConsumerAdded)
				if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "SubscriptionConsumerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) ParseSubscriptionConsumerAdded(log types.Log) (*ArbitrumVRFCoordinatorSubscriptionConsumerAdded, error) {
	event := new(ArbitrumVRFCoordinatorSubscriptionConsumerAdded)
	if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "SubscriptionConsumerAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFCoordinatorSubscriptionConsumerRemovedIterator struct {
	Event *ArbitrumVRFCoordinatorSubscriptionConsumerRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFCoordinatorSubscriptionConsumerRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFCoordinatorSubscriptionConsumerRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFCoordinatorSubscriptionConsumerRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFCoordinatorSubscriptionConsumerRemovedIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFCoordinatorSubscriptionConsumerRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFCoordinatorSubscriptionConsumerRemoved struct {
	SubId    uint64
	Consumer common.Address
	Raw      types.Log
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) FilterSubscriptionConsumerRemoved(opts *bind.FilterOpts, subId []uint64) (*ArbitrumVRFCoordinatorSubscriptionConsumerRemovedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.FilterLogs(opts, "SubscriptionConsumerRemoved", subIdRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFCoordinatorSubscriptionConsumerRemovedIterator{contract: _ArbitrumVRFCoordinator.contract, event: "SubscriptionConsumerRemoved", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) WatchSubscriptionConsumerRemoved(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorSubscriptionConsumerRemoved, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.WatchLogs(opts, "SubscriptionConsumerRemoved", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFCoordinatorSubscriptionConsumerRemoved)
				if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "SubscriptionConsumerRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) ParseSubscriptionConsumerRemoved(log types.Log) (*ArbitrumVRFCoordinatorSubscriptionConsumerRemoved, error) {
	event := new(ArbitrumVRFCoordinatorSubscriptionConsumerRemoved)
	if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "SubscriptionConsumerRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFCoordinatorSubscriptionCreatedIterator struct {
	Event *ArbitrumVRFCoordinatorSubscriptionCreated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFCoordinatorSubscriptionCreatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFCoordinatorSubscriptionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFCoordinatorSubscriptionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFCoordinatorSubscriptionCreatedIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFCoordinatorSubscriptionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFCoordinatorSubscriptionCreated struct {
	SubId uint64
	Owner common.Address
	Raw   types.Log
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) FilterSubscriptionCreated(opts *bind.FilterOpts, subId []uint64) (*ArbitrumVRFCoordinatorSubscriptionCreatedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.FilterLogs(opts, "SubscriptionCreated", subIdRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFCoordinatorSubscriptionCreatedIterator{contract: _ArbitrumVRFCoordinator.contract, event: "SubscriptionCreated", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) WatchSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorSubscriptionCreated, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.WatchLogs(opts, "SubscriptionCreated", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFCoordinatorSubscriptionCreated)
				if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "SubscriptionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) ParseSubscriptionCreated(log types.Log) (*ArbitrumVRFCoordinatorSubscriptionCreated, error) {
	event := new(ArbitrumVRFCoordinatorSubscriptionCreated)
	if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "SubscriptionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFCoordinatorSubscriptionFundedIterator struct {
	Event *ArbitrumVRFCoordinatorSubscriptionFunded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFCoordinatorSubscriptionFundedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFCoordinatorSubscriptionFunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFCoordinatorSubscriptionFunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFCoordinatorSubscriptionFundedIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFCoordinatorSubscriptionFundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFCoordinatorSubscriptionFunded struct {
	SubId      uint64
	OldBalance *big.Int
	NewBalance *big.Int
	Raw        types.Log
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) FilterSubscriptionFunded(opts *bind.FilterOpts, subId []uint64) (*ArbitrumVRFCoordinatorSubscriptionFundedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.FilterLogs(opts, "SubscriptionFunded", subIdRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFCoordinatorSubscriptionFundedIterator{contract: _ArbitrumVRFCoordinator.contract, event: "SubscriptionFunded", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) WatchSubscriptionFunded(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorSubscriptionFunded, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.WatchLogs(opts, "SubscriptionFunded", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFCoordinatorSubscriptionFunded)
				if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "SubscriptionFunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) ParseSubscriptionFunded(log types.Log) (*ArbitrumVRFCoordinatorSubscriptionFunded, error) {
	event := new(ArbitrumVRFCoordinatorSubscriptionFunded)
	if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "SubscriptionFunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequestedIterator struct {
	Event *ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequested struct {
	SubId uint64
	From  common.Address
	To    common.Address
	Raw   types.Log
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) FilterSubscriptionOwnerTransferRequested(opts *bind.FilterOpts, subId []uint64) (*ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequestedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.FilterLogs(opts, "SubscriptionOwnerTransferRequested", subIdRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequestedIterator{contract: _ArbitrumVRFCoordinator.contract, event: "SubscriptionOwnerTransferRequested", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) WatchSubscriptionOwnerTransferRequested(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequested, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.WatchLogs(opts, "SubscriptionOwnerTransferRequested", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequested)
				if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "SubscriptionOwnerTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) ParseSubscriptionOwnerTransferRequested(log types.Log) (*ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequested, error) {
	event := new(ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequested)
	if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "SubscriptionOwnerTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ArbitrumVRFCoordinatorSubscriptionOwnerTransferredIterator struct {
	Event *ArbitrumVRFCoordinatorSubscriptionOwnerTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ArbitrumVRFCoordinatorSubscriptionOwnerTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArbitrumVRFCoordinatorSubscriptionOwnerTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ArbitrumVRFCoordinatorSubscriptionOwnerTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ArbitrumVRFCoordinatorSubscriptionOwnerTransferredIterator) Error() error {
	return it.fail
}

func (it *ArbitrumVRFCoordinatorSubscriptionOwnerTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ArbitrumVRFCoordinatorSubscriptionOwnerTransferred struct {
	SubId uint64
	From  common.Address
	To    common.Address
	Raw   types.Log
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) FilterSubscriptionOwnerTransferred(opts *bind.FilterOpts, subId []uint64) (*ArbitrumVRFCoordinatorSubscriptionOwnerTransferredIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.FilterLogs(opts, "SubscriptionOwnerTransferred", subIdRule)
	if err != nil {
		return nil, err
	}
	return &ArbitrumVRFCoordinatorSubscriptionOwnerTransferredIterator{contract: _ArbitrumVRFCoordinator.contract, event: "SubscriptionOwnerTransferred", logs: logs, sub: sub}, nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) WatchSubscriptionOwnerTransferred(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorSubscriptionOwnerTransferred, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _ArbitrumVRFCoordinator.contract.WatchLogs(opts, "SubscriptionOwnerTransferred", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ArbitrumVRFCoordinatorSubscriptionOwnerTransferred)
				if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "SubscriptionOwnerTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinatorFilterer) ParseSubscriptionOwnerTransferred(log types.Log) (*ArbitrumVRFCoordinatorSubscriptionOwnerTransferred, error) {
	event := new(ArbitrumVRFCoordinatorSubscriptionOwnerTransferred)
	if err := _ArbitrumVRFCoordinator.contract.UnpackLog(event, "SubscriptionOwnerTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type GetSubscription struct {
	Balance   *big.Int
	ReqCount  uint64
	Owner     common.Address
	Consumers []common.Address
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinator) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _ArbitrumVRFCoordinator.abi.Events["OwnershipTransferRequested"].ID:
		return _ArbitrumVRFCoordinator.ParseOwnershipTransferRequested(log)
	case _ArbitrumVRFCoordinator.abi.Events["OwnershipTransferred"].ID:
		return _ArbitrumVRFCoordinator.ParseOwnershipTransferred(log)
	case _ArbitrumVRFCoordinator.abi.Events["RandomWordsFulfilled"].ID:
		return _ArbitrumVRFCoordinator.ParseRandomWordsFulfilled(log)
	case _ArbitrumVRFCoordinator.abi.Events["RandomnessFulfillmentRequested"].ID:
		return _ArbitrumVRFCoordinator.ParseRandomnessFulfillmentRequested(log)
	case _ArbitrumVRFCoordinator.abi.Events["RandomnessRequested"].ID:
		return _ArbitrumVRFCoordinator.ParseRandomnessRequested(log)
	case _ArbitrumVRFCoordinator.abi.Events["SubscriptionCanceled"].ID:
		return _ArbitrumVRFCoordinator.ParseSubscriptionCanceled(log)
	case _ArbitrumVRFCoordinator.abi.Events["SubscriptionConsumerAdded"].ID:
		return _ArbitrumVRFCoordinator.ParseSubscriptionConsumerAdded(log)
	case _ArbitrumVRFCoordinator.abi.Events["SubscriptionConsumerRemoved"].ID:
		return _ArbitrumVRFCoordinator.ParseSubscriptionConsumerRemoved(log)
	case _ArbitrumVRFCoordinator.abi.Events["SubscriptionCreated"].ID:
		return _ArbitrumVRFCoordinator.ParseSubscriptionCreated(log)
	case _ArbitrumVRFCoordinator.abi.Events["SubscriptionFunded"].ID:
		return _ArbitrumVRFCoordinator.ParseSubscriptionFunded(log)
	case _ArbitrumVRFCoordinator.abi.Events["SubscriptionOwnerTransferRequested"].ID:
		return _ArbitrumVRFCoordinator.ParseSubscriptionOwnerTransferRequested(log)
	case _ArbitrumVRFCoordinator.abi.Events["SubscriptionOwnerTransferred"].ID:
		return _ArbitrumVRFCoordinator.ParseSubscriptionOwnerTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (ArbitrumVRFCoordinatorOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (ArbitrumVRFCoordinatorOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (ArbitrumVRFCoordinatorRandomWordsFulfilled) Topic() common.Hash {
	return common.HexToHash("0x47ddf7bb0cbd94c1b43c5097f1352a80db0ceb3696f029d32b24f32cd631d2b7")
}

func (ArbitrumVRFCoordinatorRandomnessFulfillmentRequested) Topic() common.Hash {
	return common.HexToHash("0xa62e84e206cb87e2f6896795353c5358ff3d415d0bccc24e45c5fad83e17d03c")
}

func (ArbitrumVRFCoordinatorRandomnessRequested) Topic() common.Hash {
	return common.HexToHash("0xc334d6f57be304c8192da2e39220c48e35f7e9afa16c541e68a6a859eff4dbc5")
}

func (ArbitrumVRFCoordinatorSubscriptionCanceled) Topic() common.Hash {
	return common.HexToHash("0xe8ed5b475a5b5987aa9165e8731bb78043f39eee32ec5a1169a89e27fcd49815")
}

func (ArbitrumVRFCoordinatorSubscriptionConsumerAdded) Topic() common.Hash {
	return common.HexToHash("0x43dc749a04ac8fb825cbd514f7c0e13f13bc6f2ee66043b76629d51776cff8e0")
}

func (ArbitrumVRFCoordinatorSubscriptionConsumerRemoved) Topic() common.Hash {
	return common.HexToHash("0x182bff9831466789164ca77075fffd84916d35a8180ba73c27e45634549b445b")
}

func (ArbitrumVRFCoordinatorSubscriptionCreated) Topic() common.Hash {
	return common.HexToHash("0x464722b4166576d3dcbba877b999bc35cf911f4eaf434b7eba68fa113951d0bf")
}

func (ArbitrumVRFCoordinatorSubscriptionFunded) Topic() common.Hash {
	return common.HexToHash("0xd39ec07f4e209f627a4c427971473820dc129761ba28de8906bd56f57101d4f8")
}

func (ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x69436ea6df009049404f564eff6622cd00522b0bd6a89efd9e52a355c4a879be")
}

func (ArbitrumVRFCoordinatorSubscriptionOwnerTransferred) Topic() common.Hash {
	return common.HexToHash("0x6f1dc65165ffffedfd8e507b4a0f1fcfdada045ed11f6c26ba27cedfe87802f0")
}

func (_ArbitrumVRFCoordinator *ArbitrumVRFCoordinator) Address() common.Address {
	return _ArbitrumVRFCoordinator.address
}

type ArbitrumVRFCoordinatorInterface interface {
	ARBSYS(opts *bind.CallOpts) (common.Address, error)

	LINK(opts *bind.CallOpts) (common.Address, error)

	MAXCONSUMERS(opts *bind.CallOpts) (uint16, error)

	NUMCONFDELAYS(opts *bind.CallOpts) (uint8, error)

	GetConfirmationDelays(opts *bind.CallOpts) ([8]*big.Int, error)

	GetCurrentSubId(opts *bind.CallOpts) (uint64, error)

	GetProducer(opts *bind.CallOpts) (common.Address, error)

	GetSubscription(opts *bind.CallOpts, subId uint64) (GetSubscription,

		error)

	GetTotalBalance(opts *bind.CallOpts) (*big.Int, error)

	GetTotalLinkBalance(opts *bind.CallOpts) (*big.Int, error)

	IStartSlot(opts *bind.CallOpts) (*big.Int, error)

	IBeaconPeriodBlocks(opts *bind.CallOpts) (*big.Int, error)

	MaxNumWords(opts *bind.CallOpts) (*big.Int, error)

	MinDelay(opts *bind.CallOpts) (uint16, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	PendingRequestExists(opts *bind.CallOpts, subId uint64) (bool, error)

	Producer(opts *bind.CallOpts) (common.Address, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AcceptSubscriptionOwnerTransfer(opts *bind.TransactOpts, subId uint64) (*types.Transaction, error)

	AddConsumer(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error)

	BatchTransferLink(opts *bind.TransactOpts, recipients []common.Address, paymentsInJuels []*big.Int) (*types.Transaction, error)

	CancelSubscription(opts *bind.TransactOpts, subId uint64, to common.Address) (*types.Transaction, error)

	CreateSubscription(opts *bind.TransactOpts) (*types.Transaction, error)

	ForgetConsumerSubscriptionID(opts *bind.TransactOpts, consumers []common.Address) (*types.Transaction, error)

	OnTokenTransfer(opts *bind.TransactOpts, arg0 common.Address, amount *big.Int, data []byte) (*types.Transaction, error)

	ProcessVRFOutputs(opts *bind.TransactOpts, vrfOutputs []VRFBeaconTypesVRFOutput, juelsPerFeeCoin *big.Int, blockHeight uint64, arg3 [32]byte) (*types.Transaction, error)

	RedeemRandomness(opts *bind.TransactOpts, requestID *big.Int) (*types.Transaction, error)

	RemoveConsumer(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error)

	RequestRandomness(opts *bind.TransactOpts, numWords uint16, subID uint64, confirmationDelayArg *big.Int) (*types.Transaction, error)

	RequestRandomnessFulfillment(opts *bind.TransactOpts, subID uint64, numWords uint16, confirmationDelayArg *big.Int, callbackGasLimit uint32, arguments []byte) (*types.Transaction, error)

	RequestSubscriptionOwnerTransfer(opts *bind.TransactOpts, subId uint64, newOwner common.Address) (*types.Transaction, error)

	SetConfirmationDelays(opts *bind.TransactOpts, confDelays [8]*big.Int) (*types.Transaction, error)

	SetProducer(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error)

	TransferLink(opts *bind.TransactOpts, recipient common.Address, juelsAmount *big.Int) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ArbitrumVRFCoordinatorOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*ArbitrumVRFCoordinatorOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ArbitrumVRFCoordinatorOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*ArbitrumVRFCoordinatorOwnershipTransferred, error)

	FilterRandomWordsFulfilled(opts *bind.FilterOpts) (*ArbitrumVRFCoordinatorRandomWordsFulfilledIterator, error)

	WatchRandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorRandomWordsFulfilled) (event.Subscription, error)

	ParseRandomWordsFulfilled(log types.Log) (*ArbitrumVRFCoordinatorRandomWordsFulfilled, error)

	FilterRandomnessFulfillmentRequested(opts *bind.FilterOpts) (*ArbitrumVRFCoordinatorRandomnessFulfillmentRequestedIterator, error)

	WatchRandomnessFulfillmentRequested(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorRandomnessFulfillmentRequested) (event.Subscription, error)

	ParseRandomnessFulfillmentRequested(log types.Log) (*ArbitrumVRFCoordinatorRandomnessFulfillmentRequested, error)

	FilterRandomnessRequested(opts *bind.FilterOpts, nextBeaconOutputHeight []uint64) (*ArbitrumVRFCoordinatorRandomnessRequestedIterator, error)

	WatchRandomnessRequested(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorRandomnessRequested, nextBeaconOutputHeight []uint64) (event.Subscription, error)

	ParseRandomnessRequested(log types.Log) (*ArbitrumVRFCoordinatorRandomnessRequested, error)

	FilterSubscriptionCanceled(opts *bind.FilterOpts, subId []uint64) (*ArbitrumVRFCoordinatorSubscriptionCanceledIterator, error)

	WatchSubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorSubscriptionCanceled, subId []uint64) (event.Subscription, error)

	ParseSubscriptionCanceled(log types.Log) (*ArbitrumVRFCoordinatorSubscriptionCanceled, error)

	FilterSubscriptionConsumerAdded(opts *bind.FilterOpts, subId []uint64) (*ArbitrumVRFCoordinatorSubscriptionConsumerAddedIterator, error)

	WatchSubscriptionConsumerAdded(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorSubscriptionConsumerAdded, subId []uint64) (event.Subscription, error)

	ParseSubscriptionConsumerAdded(log types.Log) (*ArbitrumVRFCoordinatorSubscriptionConsumerAdded, error)

	FilterSubscriptionConsumerRemoved(opts *bind.FilterOpts, subId []uint64) (*ArbitrumVRFCoordinatorSubscriptionConsumerRemovedIterator, error)

	WatchSubscriptionConsumerRemoved(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorSubscriptionConsumerRemoved, subId []uint64) (event.Subscription, error)

	ParseSubscriptionConsumerRemoved(log types.Log) (*ArbitrumVRFCoordinatorSubscriptionConsumerRemoved, error)

	FilterSubscriptionCreated(opts *bind.FilterOpts, subId []uint64) (*ArbitrumVRFCoordinatorSubscriptionCreatedIterator, error)

	WatchSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorSubscriptionCreated, subId []uint64) (event.Subscription, error)

	ParseSubscriptionCreated(log types.Log) (*ArbitrumVRFCoordinatorSubscriptionCreated, error)

	FilterSubscriptionFunded(opts *bind.FilterOpts, subId []uint64) (*ArbitrumVRFCoordinatorSubscriptionFundedIterator, error)

	WatchSubscriptionFunded(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorSubscriptionFunded, subId []uint64) (event.Subscription, error)

	ParseSubscriptionFunded(log types.Log) (*ArbitrumVRFCoordinatorSubscriptionFunded, error)

	FilterSubscriptionOwnerTransferRequested(opts *bind.FilterOpts, subId []uint64) (*ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequestedIterator, error)

	WatchSubscriptionOwnerTransferRequested(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequested, subId []uint64) (event.Subscription, error)

	ParseSubscriptionOwnerTransferRequested(log types.Log) (*ArbitrumVRFCoordinatorSubscriptionOwnerTransferRequested, error)

	FilterSubscriptionOwnerTransferred(opts *bind.FilterOpts, subId []uint64) (*ArbitrumVRFCoordinatorSubscriptionOwnerTransferredIterator, error)

	WatchSubscriptionOwnerTransferred(opts *bind.WatchOpts, sink chan<- *ArbitrumVRFCoordinatorSubscriptionOwnerTransferred, subId []uint64) (event.Subscription, error)

	ParseSubscriptionOwnerTransferred(log types.Log) (*ArbitrumVRFCoordinatorSubscriptionOwnerTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
